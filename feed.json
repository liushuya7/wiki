{
    "version": "https://jsonfeed.org/version/1",
    "title": "Joshua Personal Notes",
    "description": "",
    "home_page_url": "https://liushuya7.github.io/wiki",
    "feed_url": "https://liushuya7.github.io/wiki/feed.json",
    "user_comment": "",
    "author": {
        "name": "Joshua Liu"
    },
    "items": [
        {
            "id": "https://liushuya7.github.io/wiki/pyvistatrimesh/",
            "url": "https://liushuya7.github.io/wiki/pyvistatrimesh/",
            "title": "PyVista/Trimesh",
            "summary": "Conversion Pyvista to Trimesh Convert Pyvista 1-D face array to Trimesh faces def pyvistaToTrimeshFaces(cells): faces = [] idx = 0 while idx &lt; len(cells): curr_cell_count&hellip;",
            "content_html": "<h2 id=\"conversion\">Conversion</h2>\n<h3 id=\"pyvista-to-trimesh\">Pyvista to Trimesh</h3>\n<p>Convert Pyvista 1-D face array to Trimesh faces</p>\n<pre><code class=\"language-py\">def pyvistaToTrimeshFaces(cells):\n    faces = []\n    idx = 0\n    while idx &lt; len(cells):\n      curr_cell_count = cells[idx]\n      curr_faces = cells[idx+1:idx+curr_cell_count+1]\n      faces.append(curr_faces)\n      idx += curr_cell_count+1\n    return np.array(faces)\n</code></pre>\n<p>Reference: <a href=\"https://github.com/AbrarAnwar/cross_section_rl/blob/ffd9f6eb2c53fdceca7be916c030a853cad2b4e0/utils.py#L68\">AbrarAnwar/cross_section_rl/utils.py</a></p>\n<h3 id=\"meshlab-to-pyvista\">Meshlab to Pyvista</h3>\n<pre><code class=\"language-py\">import numpy as np\nimport pyvista as pv\n\ndef meshlab2pv(mmesh):\n    &#39;&#39;&#39;\n    Convert meshlab mesh to PyVista polydata\n    &#39;&#39;&#39;\n    mpoints, mcells = mmesh.vertex_matrix(), mmesh.face_matrix()\n\n    if len(mcells):\n        # convert the faces into PolyData format\n        mfaces = []\n        for cell in mcells:\n            face = np.hstack((len(cell), cell))\n            mfaces.extend(face.tolist())\n        mfaces = np.array(mfaces)\n        polydata = pv.PolyData(mpoints, np.hstack(mfaces))\n    else:\n        polydata = pv.PolyData(mpoints, None)\n\n    return polydata\n\nif __name__ == &#39;__main__&#39;:\n    import pymeshlab as pm\n    \n    ms = pm.MeshSet()\n    ms.load_project(&#39;data/test.mlp&#39;)\n\n    print(ms.print_status())\n\n    meshes = []\n    plotter = pv.Plotter()\n\n    for i in range(ms.number_meshes()):\n        mesh_pv = meshlab2pv(ms.mesh(i))\n        meshes.append(mesh_pv)\n        plotter.add_mesh(mesh_pv)\n\n    plotter.add_mesh_slice_orthogonal(meshes[0])\n\n    plotter.show()\n</code></pre>\n<h2 id=\"qt-gui\">Qt GUI</h2>\n<p>Pyvistaqt Example:</p>\n<pre><code class=\"language-py\">import sys\n\nfrom PyQt5 import Qt, QtCore\n\nimport pyvista as pv\nfrom pyvistaqt import QtInteractor\n\n# from pyvista import themes\n# pv.set_plot_theme(themes.DarkTheme())\n\n\nclass MainWidget(Qt.QWidget):\n\n    def __init__(self, parent=None, show=True):\n        super(MainWidget, self).__init__()\n\n        self.test_button = Qt.QPushButton(&quot;Open&quot;)\n        self.test_button.clicked.connect(self.test_button_event)\n\n        self.frame = Qt.QFrame()\n        self.plotter = QtInteractor(self.frame)\n        vlayout = Qt.QVBoxLayout()\n        vlayout.addWidget(self.plotter.interactor)\n        hlayout = Qt.QHBoxLayout()\n        hlayout.addWidget(self.test_button)\n        vlayout.addLayout(hlayout)\n        self.setLayout(vlayout)\n\n        self.setWindowTitle(&quot;Test Qt Window&quot;)\n        self.setGeometry(550, 200, 800, 600)\n\n        # Enable dragging and dropping onto the GUI\n        self.setAcceptDrops(True)\n\n        self.plotter.show_axes()\n        self.mesh = None\n\n        if show:\n            self.show()\n\n    # The following three methods set up dragging and dropping for the app\n    def dragEnterEvent(self, e):\n        if e.mimeData().hasUrls:\n            e.accept()\n        else:\n            e.ignore()\n\n    def dragMoveEvent(self, e):\n        if e.mimeData().hasUrls:\n            e.accept()\n        else:\n            e.ignore()\n\n    def dropEvent(self, e):\n        &quot;&quot;&quot;\n        Drop files directly onto the widget\n        File locations are stored in fname\n        :param e:\n        :return:\n        &quot;&quot;&quot;\n        if e.mimeData().hasUrls:\n            e.setDropAction(QtCore.Qt.CopyAction)\n            e.accept()\n            # Workaround for OSx dragging and dropping\n            for url in e.mimeData().urls():\n                fname = str(url.toLocalFile())\n            self.fname = fname\n            self.load_mesh()\n        else:\n            e.ignore()\n\n    def test_button_event(self):\n        &quot;&quot;&quot;\n        Open a mesh file\n        &quot;&quot;&quot;\n        self.fname, _ = Qt.QFileDialog.getOpenFileName(self, &#39;Open file&#39;,&#39;&#39;,&quot;(*.ply) ;; (*.stl)&quot;)\n        self.load_mesh()\n\n    def load_mesh(self):\n        self.mesh = pv.read(self.fname)\n        self.plotter.clear()\n        self.plotter.add_mesh(self.mesh, show_edges=True)\n        self.plotter.reset_camera()\n\n    def save_mesh(self):\n        &quot;&quot;&quot;\n        Save mesh\n        &quot;&quot;&quot;\n        self.fname, f_filter = Qt.QFileDialog.getSaveFileName(self, &#39;Save file&#39;, self.fname, &quot;(*.ply) ;; (*.stl)&quot;)\n        pv.save_meshio(self.fname, self.mesh, file_format=f_filter.strip(&#39;(*.)&#39;))\n        # close the window\n        self.close()\n\n\nif __name__ == &#39;__main__&#39;:\n    app = Qt.QApplication(sys.argv)\n    window = MainWidget()\n    sys.exit(app.exec_())\n</code></pre>\n<p><a href=\"https://gist.github.com/hichamjanati/6668d91848283c31ac18d801552fb582\">Optimization visualization with pyvista</a>:</p>\n<pre><code class=\"language-py\">import pyvista as pv\nimport numpy as np\n\nmake_gif = True\n\n# increase n_points for a higher resolution\nn_points = 100\nxmin, xmax = -1.2, 1.2\nbounds = 1.25 * np.array([xmin, xmax, xmin, xmax, 0., 0.])\nx = np.linspace(xmin, xmax, n_points)\ny = np.linspace(xmin, xmax, n_points)\nx, y = np.meshgrid(x, y)\ncoords = np.array(list(zip(x.flatten(), y.flatten())))\n\ng = x ** 4 + y ** 4\ng = g.flatten()\nconstraint_mask = g &lt;= 1\n\n\ndef func(x, y):\n    return x ** 3 - y ** 3 + 2\n\n\nf = func(x, y)\nf = f.flatten()\n\ndomain_coords = np.zeros((n_points ** 2, 3))\ndomain_coords[:, :2] = coords\ndomain = pv.PolyData(domain_coords)\ndomain = domain.delaunay_2d()\ndomain_in, _ = domain.remove_points(~constraint_mask)\ndomain_out, _ = domain.remove_points(constraint_mask)\n\nminimizer_array = np.array([- 0.5 ** 0.25, 0.5 ** 0.25, 0.])\nvalue_array = minimizer_array + np.array([0., 0., func(*minimizer_array[:2])])\nminimizer = pv.PolyData(minimizer_array)\ndashed = pv.Spline(np.vstack((minimizer_array, value_array)), n_points=20)\n\ncone_direction = np.array([-1., 1., 0.])\ncone = pv.Cone(minimizer_array, cone_direction, angle=60, height=20)\ncone.points[:, 2] = 0\ncone.points *= 1 / (4 * 20) ** 0.5\n\nsurface_data = np.zeros((n_points ** 2, 3))\nsurface_data[:, :2] = coords\nsurface_data[:, 2] = f\nsurface = pv.PolyData(surface_data)\nsurface = pv.PolyData(surface)\nsurface = surface.delaunay_2d()\nsurface_in, _ = surface.remove_points(~constraint_mask)\nsurface_out, _ = surface.remove_points(constraint_mask)\n\nconstraint_title = pv.Text3D(&quot;Constraint set K&quot;, depth=0.2)\nconstraint_title.points -= constraint_title.points.mean(0)[None, :]\nconstraint_title.points *= \\\n    1.75 / (constraint_title.points.max() - constraint_title.points.min())\nconstraint_title.rotate_z(90)\n\ntext3d = pv.Text3D(&quot;Minimizer x&quot;, depth=0.2)\ntext3d.points -= text3d.points.mean(0)[None, :]\ntext3d.points /= text3d.points.max() - text3d.points.min()\ntext3d.rotate_z(90)\ntext3d.rotate_y(90)\ntext3d.points += 1.75 * minimizer_array\n\ntangeant = pv.Text3D(&quot;Tangeant cone at x&quot;, depth=0.2)\ntangeant.points -= tangeant.points.mean(0)[None, :]\ntangeant.points *= 1.75 / (tangeant.points.max() - tangeant.points.min())\ntangeant.rotate_z(90)\ntangeant.rotate_x(180)\ntangeant.rotate_y(90)\ntangeant.points += np.array([-1.5, -1.5, 0])\n\nplotter = pv.Plotter()\nplotter.add_mesh(domain_out, color=&quot;gray&quot;, opacity=0.2)\nplotter.add_mesh(domain_in, color=&quot;black&quot;)\nplotter.add_mesh(surface_in, scalars=f[constraint_mask], cmap=&quot;hot&quot;)\nplotter.add_mesh(surface_out, cmap=&quot;Greys&quot;, opacity=0.2)\nplotter.add_mesh(cone, color=&quot;blue&quot;, opacity=0.3)\nplotter.add_mesh(minimizer, color=&quot;red&quot;, render_points_as_spheres=True,\n                 point_size=15)\nplotter.add_mesh(dashed, color=&quot;red&quot;)\nplotter.add_mesh(text3d, color=&quot;red&quot;)\nplotter.add_mesh(tangeant, color=&quot;black&quot;)\nplotter.add_mesh(constraint_title, color=&quot;white&quot;)\nplotter.background_color = &quot;white&quot;\nplotter.show_bounds(grid=&#39;front&#39;, location=&#39;outer&#39;,\n                    show_zaxis=False, color=&quot;black&quot;,\n                    bounds=bounds)\n\nif make_gif:\n    # when the window shows up, close it by pressing the q-Key NOT the quit\n    # button\n    plotter.show(auto_close=False)\n\n    path = plotter.generate_orbital_path(3., n_points=200,\n                                         shift=1.75 * domain_out.length)\n    plotter.open_movie(&#39;orbit.mp4&#39;)\n    plotter.orbit_on_path(path, write_frames=True)\n    plotter.close()\nelse:\n    plotter.show()\n</code></pre>\n<p><a href=\"https://gist.github.com/dgobbi/bfdb149e38777f25d0891c1b883858e2\">Simple QVTKRenderWindowInteractor example in Python</a>:</p>\n<pre><code class=\"language-py\"># coding=utf-8\n\nimport sys\n\nfrom vtkmodules.vtkFiltersSources import vtkConeSource\nfrom vtkmodules.vtkRenderingCore import vtkActor, vtkPolyDataMapper, vtkRenderer\n# load implementations for rendering and interaction factory classes\nimport vtkmodules.vtkRenderingOpenGL2\nimport vtkmodules.vtkInteractionStyle\n\nimport QVTKRenderWindowInteractor as QVTK\nQVTKRenderWindowInteractor = QVTK.QVTKRenderWindowInteractor\n\nif QVTK.PyQtImpl == &#39;PySide6&#39;:\n    from PySide6.QtCore import Qt\n    from PySide6.QtWidgets import QApplication, QMainWindow\nelif QVTK.PyQtImpl == &#39;PySide2&#39;:\n    from PySide2.QtCore import Qt\n    from PySide2.QtWidgets import QApplication, QMainWindow\nelse:\n    from PySide.QtCore import Qt\n    from PySide.QtGui import QApplication, QMainWindow\n\n\ndef QVTKRenderWidgetConeExample(argv):\n    &quot;&quot;&quot;A simple example that uses the QVTKRenderWindowInteractor class.&quot;&quot;&quot;\n    # every QT app needs an app\n    app = QApplication([&#39;QVTKRenderWindowInteractor&#39;])\n\n    window = QMainWindow()\n\n    # create the widget\n    widget = QVTKRenderWindowInteractor(window)\n    window.setCentralWidget(widget)\n    # if you don&#39;t want the &#39;q&#39; key to exit comment this.\n    widget.AddObserver(&quot;ExitEvent&quot;, lambda o, e, a=app: a.quit())\n\n    ren = vtkRenderer()\n    widget.GetRenderWindow().AddRenderer(ren)\n\n    cone = vtkConeSource()\n    cone.SetResolution(8)\n\n    coneMapper = vtkPolyDataMapper()\n    coneMapper.SetInputConnection(cone.GetOutputPort())\n\n    coneActor = vtkActor()\n    coneActor.SetMapper(coneMapper)\n\n    ren.AddActor(coneActor)\n\n    # show the widget\n    window.show()\n\n    widget.Initialize()\n    widget.Start()\n\n    # start event processing\n    # Source: https://doc.qt.io/qtforpython/porting_from2.html\n    # &#39;exec_&#39; is deprecated and will be removed in the future.\n    # Use &#39;exec&#39; instead.\n    try:\n        app.exec()\n    except AttributeError:\n        app.exec_()\n\nif __name__ == &quot;__main__&quot;:\n    QVTKRenderWidgetConeExample(sys.argv)\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-12-13T15:28:56-05:00",
            "date_modified": "2022-12-13T15:28:56-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/python/",
            "url": "https://liushuya7.github.io/wiki/python/",
            "title": "Python",
            "summary": "Collections PythonRobotics Comprehensive Python Cheatsheet Problem Solving with Python Scipy Lecture Notes Github: https://github.com/scipy-lectures/scipy-lecture-notes PythonTemplate Python Template is a Cookiecutter template for creating a python&hellip;",
            "content_html": "<h2 id=\"collections\">Collections</h2>\n<ul>\n<li><a href=\"https://github.com/AtsushiSakai/PythonRobotics\">PythonRobotics</a></li>\n<li><a href=\"https://github.com/gto76/python-cheatsheet\">Comprehensive Python Cheatsheet</a></li>\n<li><a href=\"https://problemsolvingwithpython.com/\">Problem Solving with Python</a> </li>\n<li><a href=\"https://scipy-lectures.org/\">Scipy Lecture Notes</a><ul>\n<li>Github: <a href=\"https://github.com/scipy-lectures/scipy-lecture-notes\">https://github.com/scipy-lectures/scipy-lecture-notes</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/UCL/PythonTemplate\">PythonTemplate</a><ul>\n<li>Python Template is a Cookiecutter template for creating a python project</li>\n</ul>\n</li>\n<li><a href=\"https://data36.com/linear-regression-in-python-numpy-polyfit/\">Linear Regression in Python using numpy + polyfit (with code base)</a></li>\n</ul>\n<h3 id=\"libraries\">Libraries</h3>\n<ul>\n<li><a href=\"https://pypi.org/project/cupoch/\">cupoch</a> - Robotics with GPU computing</li>\n<li><a href=\"https://github.com/neka-nat/kinpy\">kinpy</a> -Simple kinematics calculation toolkit for robotics</li>\n<li><a href=\"https://github.com/facebookresearch/pytorch3d\">PyTorch3D</a> - provides efficient, reusable components for 3D Computer Vision research with <a href=\"https://pytorch.org/\">PyTorch</a></li>\n</ul>\n<h3 id=\"tutorials\">Tutorials</h3>\n<ul>\n<li><a href=\"https://notebook.community/\">Jupyter Notebooks Gallery</a></li>\n<li><a href=\"https://notebook.community/finnhacks42/opencv-play/templates/OpenCV%20tutorial\">Learn OpenCV Jupyter notebook</a></li>\n</ul>\n<h2 id=\"quick-notes\">Quick Notes</h2>\n<h3 id=\"pip-install-from-a-git-repository\"><code>**pip install**</code> From a Git Repository</h3>\n<pre><code class=\"language-sh\">python -m pip install git+https://github.com/django/django.git@main\n</code></pre>\n<h3 id=\"pip-install-from-a-local-dir\"><code>**pip install**</code> From a local dir</h3>\n<pre><code class=\"language-sh\">pip install -e /path/to/package\n</code></pre>\n<ul>\n<li><code>-e</code> installs the package in a way, that you can edit the package, but it requires that the package source stay in the same place (<code>/path/to/package</code> in this case) forever.</li>\n</ul>\n<h3 id=\"glob通配符获取文件列表\"><code>**glob**</code>通配符获取文件列表</h3>\n<pre><code class=\"language-sh\">glob.glob(&quot;./*.jpg&quot;)\n获取当前目录下的jpg文件列表\n</code></pre>\n<h3 id=\"__init__py的作用\"><strong>__init__.py</strong>的作用</h3>\n<p>参考链接 <a href=\"https://www.cnblogs.com/lands-ljk/p/5880483.html\">https://www.cnblogs.com/lands-ljk/p/5880483.html</a></p>\n<p><strong>__init__</strong>.py 文件的作用是将文件夹变为一个Python模块,Python 中的每个模块的包中，都有__init__.py 文件。</p>\n<p>通常__init__.py 文件为空，但是我们还可以为它增加其他的功能。我们在导入一个包时，实际上是导入了它的__init__.py文件。这样我们可以在__init__.py文件中批量导入我们所需要的模块，而不再需要一个一个的导入。</p>\n<p>当导入模块时，解释器按照sys.path列表中的目录顺序来查找导入文件。</p>\n<pre><code class=\"language-py\">import sys\nprint(sys.path)\n</code></pre>\n<h2 id=\"other-tools\">Other Tools</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/53070679\">VScode Configure Python autoComplete extraPaths</a></li>\n<li><a href=\"https://stackoverflow.com/a/64690321\">Use Pylance for autoCompletion</a></li>\n<li><a href=\"https://github.com/wenmin-wu/jupyter-tabnine\">TabNine, Autocompletion for Jupyter Notebook</a></li>\n</ul>\n<h2 id=\"issues\">Issues</h2>\n<h3 id=\"编译ros提示缺少em模块\"><strong>编译ros提示缺少em模块</strong></h3>\n<pre><code class=\"language-bash\">python3 -m pip install empy\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-12-13T14:49:29-05:00",
            "date_modified": "2022-12-13T15:30:48-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/c-learning-note/",
            "url": "https://liushuya7.github.io/wiki/c-learning-note/",
            "title": "C++ Learning Note",
            "summary": "List #include &lt;list&gt; In C++ lists are ordered sequences of variables of the same type. To initialize them we have to specify which type are&hellip;",
            "content_html": "<h2 id=\"list\">List</h2>\n<pre><code class=\"language-cpp\">#include &lt;list&gt;\n</code></pre>\n<p>In C++ lists are ordered sequences of variables of the same type. To initialize them we have to specify which type are the variables inside it. For example, for a list of integer values:</p>\n<pre><code class=\"language-cpp\">list&lt;int&gt; numbers_list({1,10,100,1000});\n</code></pre>\n<p>And a list of string values:</p>\n<pre><code class=\"language-cpp\">list&lt;string&gt; vocals_list( {&quot;a&quot;,&quot;e&quot;,&quot;i&quot;,&quot;o&quot;,&quot;u&quot;} );\n</code></pre>\n<p>The inconvenience with lists in C++ is that they are not as easy to print as in other languages. In this case we need to loop over all the items in a list to print them one by one. For now, here’s an example of printing a list:</p>\n<pre><code class=\"language-cpp\">for (int val : numbers_list)             // Loop\n    cout &lt;&lt; val &lt;&lt; &quot;  &quot;;                 // Print function\n\nfor (string val : vocals_list)           // Loop\n    cout &lt;&lt; val &lt;&lt; &quot;  &quot;;                 // Print function\n</code></pre>\n<p>Lists are very useful, as they occupy a memory space that can be modified. They have builtin functions to, for example, add a new item in the beginning of the list, or at the end of it:</p>\n<pre><code class=\"language-cpp\">numbers_list.push_front(0);             //insert in the beginning\nnumbers_list.push_back(3000);           //insert in the end\n</code></pre>\n<p>The resulting list would be <code>0,1,10,100,1000,3000</code></p>\n<p>Finally, we can also concatenate a list at the end of another, enlarging the first one and not deleting the second one, with the builtin function <code>insert()</code>:</p>\n<pre><code class=\"language-cpp\">list&lt;int&gt; new_list({5,50,500});\n\nnumbers_list.insert(numbers_list.end(),new_list.begin(),new_list.end());\n</code></pre>\n<p>Then the <code>numbers_list</code> will be modified as <code>0,1,10,100,1000,3000,5,50,500</code></p>\n<h2 id=\"dictionaries\"><strong>Dictionaries</strong></h2>\n<pre><code class=\"language-cpp\">#include &lt;map&gt;\n</code></pre>\n<p>A dictionary in C++ is called a <strong>map</strong>, and it is a container of values that are indexed by a key. This means that it stores two kinds of information: keys and values.</p>\n<p>For example, if we want to store the names of a TV series characters and also in how many episodes they appear, we don’t need a list with the names and a list with the number of episodes, we just need a dictionary where the keys are the names and the values are the number of episodes: <code>{ &quot;Dolores&quot;: 30, &quot;Maeve&quot;: 27, &quot;Theresa&quot;:6, &quot;Clementine&quot;:11 }  { &quot;Dolores&quot;: 30, &quot;Maeve&quot;: 27, &quot;Theresa&quot;:6, &quot;Clementine&quot;:11 }</code> </p>\n<p>To initialize it we need to call map, and specify the data types of the keys and values:</p>\n<pre><code class=\"language-cpp\">map&lt;string,int&gt; girls_dictionary;\n</code></pre>\n<p>Here we are creating a dictionary called <code>girls_dictionary</code>, where the keys are strings and the values are integers.</p>\n<p>To insert data into this dictionary we can call each key and assign it a value, one by one:</p>\n<pre><code class=\"language-cpp\">girls_dictionary[&quot;Dolores&quot;] = 30;\ngirls_dictionary[&quot;Maeve&quot;] = 27;\ngirls_dictionary[&quot;Theresa&quot;] = 6;\ngirls_dictionary[&quot;Clementine&quot;] = 11;\n\nfor (auto item : girls_dictionary)\n    cout &lt;&lt; item.first &lt;&lt; &quot; appears in &quot; &lt;&lt; item.second &lt;&lt; &quot; episodes\\n&quot;;\n</code></pre>\n<p>Finally, we can print the items in the dictionary with a loop. When we print it this is not a list, the dictionary itself organizes the keys alphabetically.</p>\n<pre><code class=\"language-cpp\">map&lt;double, float&gt; x_t_dictionary;\nx_t_dictionary[t_0] = x_0;\nx_t_dictionary[t_1] = x_1;\n\n// The functions ROS_INFO() and ROS_INFO_STREAM() essentially have the same purpose as &#39;cout&#39;\nfor (auto item : x_t_dictionary) {\n  ROS_INFO_STREAM(&quot;Time &quot; &lt;&lt; item.first &lt;&lt; &quot;, position &quot; &lt;&lt; item.second\n                          &lt;&lt; &quot; \\n&quot;);\n  }\n</code></pre>\n<h2 id=\"io-functions\">I/O functions</h2>\n<h3 id=\"print\">Print</h3>\n<ul>\n<li>printf</li>\n<li>cout</li>\n</ul>\n<h3 id=\"input\">Input</h3>\n<ul>\n<li>cin</li>\n<li>getline(cin, name)</li>\n</ul>\n<h2 id=\"arrays\">Arrays</h2>\n<pre><code class=\"language-cpp\">int myarray[6];\nint myarray[6] = {4,8,15,16,23,42};\nint myarray[] = {4,8,15,16,23,42};\n</code></pre>\n<p>We can also print all the elements of an array with a for loop:</p>\n<pre><code class=\"language-cpp\">for (auto items : myarray) {\n    cout &lt;&lt; items &lt;&lt; endl;\n}\n</code></pre>\n<h2 id=\"pointers\">Pointers</h2>\n<pre><code class=\"language-cpp\">int myvariable = 42;\n</code></pre>\n<p>We have already seen how to obtain the address of a variable using <code>&amp;</code>. The type of variable that can store this address of another variable is called a <strong>pointer</strong>. Pointers can be declared with the operator <code>*</code> , specifying the type of variable they will be pointing to:</p>\n<pre><code class=\"language-cpp\">int * mypointer;\n</code></pre>\n<p>If we want this pointer to store the address of our previous variable <code>myvariable</code>, we just need to give it the value of its address:</p>\n<pre><code class=\"language-cpp\">mypointer = &amp;myvariable;\ncout &lt;&lt; mypointer &lt;&lt; endl;\n</code></pre>\n<p>This expression will print the previous address of <code>myvariable</code> we’ve seen in the first section:</p>\n<pre><code class=\"language-text-plain\">&gt; 177687\n</code></pre>\n<p>Now that the relationship between <code>myvariable</code> and <code>mypointer</code> is established, we can access the original value of <code>myvariable</code> just using its pointer:</p>\n<pre><code class=\"language-cpp\">cout &lt;&lt; *mypointer &lt;&lt; endl;\n</code></pre>\n<p>This will print the value stored in the memory with the address 177687:</p>\n<pre><code class=\"language-text-plain\">&gt; 42\n</code></pre>\n<p>We call this operation <strong>dereferencing</strong>, using the symbol <code>*</code>, and it is always followed by a name of a variable. Do not confuse the asterisk of declaring a pointer, which follows a data type, with this dereferencing operator!</p>\n<ul>\n<li>Why this is useful?<ul>\n<li>We can first declare a variable, then assign a pointer to its address, and just manipulate this pointer to make changes.</li>\n<li>Also, we cannot change the type of <code>myvariable</code> during a program, but a pointer can be assigned to another variable later in the same program.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"constants\">Constants</h4>\n<p>Pointers may also be used only to access values to read them, not to modify them. These will be pointers pointed to <strong>constant variables</strong>, which need to be specified when declaring the pointer.</p>\n<p>For example, for an integer variable:</p>\n<pre><code class=\"language-cpp\">int variable = 10;\n</code></pre>\n<p>when declaring the pointer we need to specify that it points to a constant integer:</p>\n<pre><code class=\"language-cpp\">const int* pointer = &amp;variable;\n</code></pre>\n<p>We can read the value of the variable it is pointing to by <strong>dereferencing</strong>:</p>\n<pre><code class=\"language-cpp\">cout &lt;&lt; &quot;Value of variable: &quot; &lt;&lt; *pointer &lt;&lt; endl;\n</code></pre>\n<p>But we cannot change the value of the variable:</p>\n<pre><code class=\"language-cpp\">*pointer = 20; // INCORRECT!!!!\n</code></pre>\n<p>We can also create <strong>constant pointers</strong>, independently of them pointing to a constant variable or not. This kind of pointers need to specify the constant character right before the pointer’s name:</p>\n<pre><code class=\"language-cpp\">int* const pointer;\n</code></pre>\n<p>To make this even more trickier, here are all the possibilities we can have using constants:</p>\n<pre><code class=\"language-cpp\">int* pointer;                   // non-constant pointer to non-constant integer\nconst int* pointer;             // non-constant pointer to constant integer\nint* const pointer;             // constant pointer to non-constant integer\nconst int* const pointer;       // constant pointer to constant integer\n</code></pre>\n<p>The final thing we need to learn is that in C++ functions CANNOT return arrays. It is just not possible. What they CAN do is return a pointer to an array. See how useful they are? Awesome.</p>\n<p>In this exercise first we are going to show you a small piece of code of the <strong>RosbotClass</strong> we’ve been using all along:</p>\n<pre><code class=\"language-cpp\">float *RosbotClass::get_laser_full() {\n  float *laser_range_pointer = laser_range.data();\n  return laser_range_pointer;\n}\n</code></pre>\n<p>This function called <strong>get_laser_full()</strong> is a function that returns a pointer (see the operator asterisk before the name of the class <code>**RosbotClass**</code>). What it does is take the values of a ROS vector called <strong>laser_range</strong> and assign them a pointer, then return this pointer.</p>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "C++"
            ],
            "date_published": "2022-12-13T13:45:18-05:00",
            "date_modified": "2022-12-13T13:45:40-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/c-code-snippet/",
            "url": "https://liushuya7.github.io/wiki/c-code-snippet/",
            "title": "C++ Code Snippet",
            "summary": "Network Acquire Localhost IP Address #include &lt;arpa/inet.h&gt; #include &lt;sys/ioctl.h&gt; #include &lt;sys/types.h&gt; #include &lt;linux/if.h&gt; #include &lt;net/if_arp.h&gt; #include &lt;unistd.h&gt; #include &lt;linux/sockios.h&gt; #include &lt;linux/ethtool.h&gt; #include &lt;cstring&gt; #include &lt;cassert&gt;&hellip;",
            "content_html": "<h2 id=\"network\">Network</h2>\n<h3 id=\"acquire-localhost-ip-address\">Acquire Localhost IP Address</h3>\n<pre><code class=\"language-cpp\">#include &lt;arpa/inet.h&gt;\n#include &lt;sys/ioctl.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;linux/if.h&gt;\n#include &lt;net/if_arp.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;linux/sockios.h&gt;\n#include &lt;linux/ethtool.h&gt;\n#include &lt;cstring&gt;\n#include &lt;cassert&gt;\n#include &lt;cstdio&gt;\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n\nstd::string ipAddressToString(uint32_t ipAddress)\n{\n    char buffer[INET_ADDRSTRLEN] = {0};\n    uint32_t addr = htonl(ipAddress);\n    return std::string(inet_ntop(AF_INET, &amp;addr, buffer, sizeof(buffer)));\n}\n\nint main(int argc, char *argv[]) {\n\n    int fd = socket(AF_INET, SOCK_DGRAM, 0); \n    assert(fd &gt; 0); \n\n    struct ifconf ifc;\n    struct ifreq *pifr;\n\n    ifc.ifc_len = sizeof(struct ifreq) * 10; \n    ifc.ifc_buf = (char*) malloc(ifc.ifc_len);\n\n    int err = ioctl(fd, SIOCGIFCONF, &amp;ifc);\n    assert(err &gt;= 0); \n\n    int ifc_num = ifc.ifc_len / sizeof(struct ifreq);\n    printf(&quot;Interfaces: %d\\r\\n&quot;, ifc_num);\n\n    assert(ifc.ifc_buf != NULL);\n    pifr = ifc.ifc_req;\n    \n    // Iterate trought all ifreq and save interface type, ip and netmask\n    for (int i = 0;  i &lt; ifc_num; ++i)\n    {       \n        err = ioctl(fd, SIOCGIFADDR, &amp;pifr[i]);\n        assert(err == 0); \n        uint32_t ipAddress = ntohl(reinterpret_cast&lt;struct sockaddr_in*&gt;(&amp;(pifr[i].ifr_addr))-&gt;sin_addr.s_addr);\n\n        err = ioctl(fd, SIOCGIFNETMASK, &amp;pifr[i]);\n        assert(err == 0); \n        uint32_t netmaskAddress = ntohl(reinterpret_cast&lt;struct sockaddr_in*&gt;(&amp;(pifr[i].ifr_netmask))-&gt;sin_addr.s_addr);\n\n        err = ioctl(fd, SIOCGIFBRDADDR, &amp;pifr[i]);\n        assert(err == 0); \n        uint32_t broadcastAddress = ntohl(reinterpret_cast&lt;struct sockaddr_in*&gt;(&amp;(pifr[i].ifr_broadaddr))-&gt;sin_addr.s_addr);\n\n        printf(&quot;Network Interface: %s, IP=%s, Netmask=%s, Broadcast=%s\\r\\n&quot;, \n               pifr[i].ifr_name, \n               ipAddressToString(ipAddress).c_str(), \n               ipAddressToString(netmaskAddress).c_str(), \n               ipAddressToString(broadcastAddress).c_str());\n    }   \n}\n</code></pre>\n<h2 id=\"uncategorized\">Uncategorized</h2>\n<h3 id=\"22cpp二进制形式打开文件\"><strong>22.cpp二进制形式打开文件</strong></h3>\n<pre><code class=\"language-cpp\">int begin, end;\n\n  std::ifstream file(input_bmp_name, std::ios::in | std::ios::binary);\n  if (!file) {\n    LOG(FATAL) &lt;&lt; &quot;input file &quot; &lt;&lt; input_bmp_name &lt;&lt; &quot; not found&quot;;\n    exit(-1);\n  }\n\n  begin = file.tellg();\n  file.seekg(0, std::ios::end);\n  end = file.tellg();\n  size_t len = end - begin;\n\n  if (s-&gt;verbose) LOG(INFO) &lt;&lt; &quot;len: &quot; &lt;&lt; len;\n\n  std::vector&lt;uint8_t&gt; img_bytes(len);\n  file.seekg(0, std::ios::beg);\n  file.read(reinterpret_cast&lt;char*&gt;(img_bytes.data()), len);\n</code></pre>\n<h3 id=\"21split函数的实现\"><strong>21.split函数的实现</strong></h3>\n<pre><code class=\"language-cpp\">std::vector&lt;std::string&gt; split(const std::string &amp;str, const std::string &amp;sep)\n{\n    std::string::size_type pos;\n    std::vector&lt;std::string&gt; result;\n\n    std::string newstr =  str + sep;\n    size_t size=newstr.size();\n\n    for(size_t i=0; i&lt;size; ++i)\n    {\n        pos=newstr.find(sep,i);\n        if(pos&lt;size)\n        {\n            std::string s = newstr.substr(i,pos-i);\n            result.push_back(s);\n            i=pos+sep.size()-1;\n        }\n    }\n    return result;\n}\n</code></pre>\n<h3 id=\"20判断是否有宏定义\"><strong>20.判断是否有宏定义</strong></h3>\n<pre><code class=\"language-cpp\">#ifdef PLATFORM_QNX  \n  int platform = 1;\n#elif defined PLATFORM_ANDROID\n  int platform = 2;\n#else\n  int platform = 3;\n#endif\n</code></pre>\n<h3 id=\"19不支持模版别名的处理办法\"><strong>19.不支持模版别名的处理办法</strong></h3>\n<p>__cpp_user_defined_literals测试，从gcc4.7版本开始支持模板别名，但是qnx的libc++的__config却检测到gcc就认为没有模板别名的特性</p>\n<p>所以这里有个bug，是libc++库对gcc编译的配置选项出现了问题</p>\n<p>参考标准库中libc++库中memory头文件中的一段代码</p>\n<pre><code class=\"language-cpp\">#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES\n    template &lt;class _Tp&gt; using rebind_alloc =\n                  typename __allocator_traits_rebind&lt;allocator_type, _Tp&gt;::type;\n    template &lt;class _Tp&gt; using rebind_traits = allocator_traits&lt;rebind_alloc&lt;_Tp&gt;&gt;;\n#else  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES\n    template &lt;class _Tp&gt; struct rebind_alloc\n        {typedef typename __allocator_traits_rebind&lt;allocator_type, _Tp&gt;::type other;};\n    template &lt;class _Tp&gt; struct rebind_traits\n        {typedef allocator_traits&lt;typename rebind_alloc&lt;_Tp&gt;::other&gt; other;};\n#endif  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES\n</code></pre>\n<h3 id=\"18libstdclibc\"><strong>18.libstdc++/libc++</strong></h3>\n<p>gcc配套的 <code>libstdc++</code>\n<code>llvm/clang++</code> 配套的 <code>libc++</code></p>\n<p><code>libstdc++</code>包含两个库: <code>libstdc++.so</code>(接口层) 和 <code>libsupc++.so</code>(实现层) \n<code>libc++</code>包含两个库: <code>libc++.so</code>(接口层) <code>libc++abi.so</code>(实现层)</p>\n<p><code>libstdc++</code>的头文件位置 <code>/usr/include/c++/5.4/</code>  其中<code>5.4</code>位gcc编译器的版本号\n<code>libc++</code>头文件的位置 <code>/usr/include/c++/v1/</code></p>\n<p>配置编译选项:【注意】这个是配置选择头文件的\n<code>-stdlib=libc++  -stdlib=libstdc++</code></p>\n<p>通过cmake配置</p>\n<pre><code class=\"language-cmake\">set(CMAKE_EXE_LINKER_FLAGS &quot;${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -lc++ -lc++abi&quot;)\n</code></pre>\n<h3 id=\"17虚析构的作用\"><strong>17.虚析构的作用</strong></h3>\n<p>1.通过父类指针释放所指向的子类。</p>\n<pre><code class=\"language-cpp\">class Animal {\n  vitual ~Animal() {\n    std::cout &lt;&lt; &quot;delete animal..&quot; &lt;&lt; std::endl;\n  }\n}\n\nclass Dog : public Animal {\n  ~Dog() {\n    std::cout &lt;&lt; &quot;delete dog...&quot; &lt;&lt; std::endl;\n  };\n};\n\nAnimal* animal = new Dog();\n\ndelete animal;\n</code></pre>\n<p>如上执行会输出</p>\n<pre><code class=\"language-text-plain\">delete dog...\ndelete animal..\n</code></pre>\n<p>如果去掉了vitual修饰~Animal()，则会只输出如下</p>\n<pre><code class=\"language-text-plain\">delete animal..\n</code></pre>\n<p>因为父类的构造函数和析构函数不能被子类继承，但是会形成多态，</p>\n<p>所以当父类定义成虚析构函数的时候，会先动态调用子类的析构函数，</p>\n<p>然后由于delete的机制，会接着调用父类的析构函数</p>\n<h3 id=\"16待查。。。\"><strong>16.待查。。。</strong></h3>\n<pre><code class=\"language-cpp\">std::atomic_bool                             shutdownFlag_;\nwhile (!shutdownFlag_.load(std::memory_order_acquire)) {\n\n}\n</code></pre>\n<h3 id=\"15同名的头文件\"><strong>15.同名的头文件</strong></h3>\n<p>如果搜索路径中包含两个同名的头文件，这时候只会包含第一个搜索到的头文件。示例如下</p>\n<pre><code class=\"language-text-plain\">目录结构\n\ncpptest\n|\n|---build\n|\n|---include_1\n|   |\n|   |---same_name.hpp\n|\n|---include_2\n|   |\n|   |---same_name.hpp\n|\n|---main.cpp\n|\n|---CMakeLists.txt\n</code></pre>\n<p><code>include_1/same_name.hpp</code> 中内容如下</p>\n<pre><code class=\"language-cpp\">struct cat{\n  int age;\n};\n</code></pre>\n<p><code>include_2/same_name.hpp</code> 中内容如下</p>\n<pre><code class=\"language-cpp\">struct dog{\n  int age;\n};\n</code></pre>\n<p><code>CMakeLists.txt</code>内容如下</p>\n<pre><code class=\"language-cmake\">project(demo)\nset(CMAKE_CXX_STANDARD 11)\n\nadd_executable(\n  ${PROJECT_NAME}\n  main.cpp)\n\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n  include_2\n  include_1\n)\n</code></pre>\n<p><code>main.cpp</code>内容如下</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;same_name.hpp&quot;\n\nint main(int argc, char* argv[]) {\n  cat c;\n  c.age = 1;\n  dog d;\n  d.age = 2;\n  cout &lt;&lt; d.age &lt;&lt; endl;\n}\n</code></pre>\n<p>这时候编译会报错如下</p>\n<pre><code class=\"language-bash\">/Users/liushichao/Exercise/cpp/test_cpp/main.cpp:6:3: error: unknown type name &#39;cat&#39;\n</code></pre>\n<p>调整<code>CMakeLists.txt</code>内容如下</p>\n<pre><code class=\"language-cmake\">project(demo)\nset(CMAKE_CXX_STANDARD 11)\n\nadd_executable(\n  ${PROJECT_NAME}\n  main.cpp)\n\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n  include_1\n  include_2\n)\n</code></pre>\n<p>这时候编译会报错如下</p>\n<pre><code class=\"language-bash\">/Users/liushichao/Exercise/cpp/test_cpp/main.cpp:8:3: error: unknown type name &#39;dog&#39;\n</code></pre>\n<p>调整<code>CMakeLists.txt</code>内容如下</p>\n<pre><code class=\"language-cmake\">project(demo)\nset(CMAKE_CXX_STANDARD 11)\n\nadd_executable(\n  ${PROJECT_NAME}\n  main.cpp)\n\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n)\n</code></pre>\n<p><code>main.cpp</code>内容如下</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;include_1/same_name.hpp&quot;\n#include &quot;include_2/same_name.hpp&quot;\n\nint main(int argc, char* argv[]) {\n  cat c;\n  c.age = 1;\n  dog d;\n  d.age = 2;\n  cout &lt;&lt; d.age &lt;&lt; endl;\n\n}\n</code></pre>\n<p>这样就可以运行成功了。</p>\n<h3 id=\"14可变参数数模板\"><strong>14.可变参数数模板</strong></h3>\n<p>1.递归展开参数包</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n\nstd::string operator&quot;&quot;_s (const char* orign) {\n\n  return  orign;\n}\n\ntemplate &lt;typename T&gt;\nT sum(T head) {\n  return head;\n}\n\ntemplate &lt;typename T, typename... Types&gt; \nT sum(T head, Types... args) {\n  cout &lt;&lt; sizeof...(args) &lt;&lt; endl;\n  return head + sum&lt;T&gt;(args...);\n}\n\nint main(int argc, char* argv[]) {\n  cout &lt;&lt; sum(1, 2, 3, 4, 5) &lt;&lt; endl;\n}\n</code></pre>\n<h3 id=\"13c操作符--operators\"><strong>13.c++操作符 / operators</strong></h3>\n<p>c++ 11 引入了新的操作夫，用户定义字面量操作符，<a href=\"https://en.cppreference.com/w/cpp/language/user_literal\">https://en.cppreference.com/w/cpp/language/user_literal</a></p>\n<p>C++ divides the operators into the following groups:</p>\n<ul>\n<li>Arithmetic operators</li>\n<li>Assignment operators</li>\n<li>Comparison operators</li>\n<li>Logical operators</li>\n<li>Bitwise operators</li>\n</ul>\n<h3 id=\"12cpp文件中编写模板的定义\"><strong>12.cpp文件中编写模板的定义</strong></h3>\n<p>参考：</p>\n<p><a href=\"https://stackoverflow.com/a/115735\">https://stackoverflow.com/a/115735</a></p>\n<p><a href=\"https://www.codeproject.com/Articles/48575/How-to-Define-a-Template-Class-in-a-h-File-and-Imp\">https://www.codeproject.com/Articles/48575/How-to-Define-a-Template-Class-in-a-h-File-and-Imp</a></p>\n<pre><code class=\"language-cpp\">//mstack.hpp\ntemplate&lt;typename T&gt;\nclass mstack{\n void push(const T&amp; e);\n};\n</code></pre>\n<pre><code class=\"language-cpp\">//mstack.cpp\ntemplate&lt;typename T&gt;\nvoid mstack&lt;T&gt;::push(const T&amp; e) {\n data_.push_back(e);\n}\n\n//important!!!\n// this func is no need to be call.\nvoid testxxx() {\n mstack&lt;int&gt; ms;\n ms.push(1);\n}\n</code></pre>\n<pre><code class=\"language-cpp\">//client.cpp\n\nvoid main() {\n mstack&lt;int&gt; m_c_s;\n m_c_s.push(2334);\n}\n</code></pre>\n<h3 id=\"11类中的const成员函数\"><strong>11.类中的const成员函数</strong></h3>\n<p>参考： c++ primer 5 中文版 p231</p>\n<p>成员函数的参数列表后面紧跟的const关键字是修饰隐式的this指针的。是顶层指针（参考下边的10顶层const的介绍），表明this是指向常量对象的，const成员函数中的 this 指向的值不能修改。const 的对象上不能调用非const成员函数，所以定义成const的成员函数调用起来更灵活。</p>\n<h3 id=\"10顶层const与底层const\"><strong>10.顶层const与底层const</strong></h3>\n<p>参考：c++ primer 5 中文版 p57</p>\n<p>这个是针对指针的，因为指针本身也是对象，所以const修饰指针的变量的时候可能产生歧义，一个是指针变量是常量不可变，另一种情况是指针指向的是常量，这样指针变量本身是可以修改的。</p>\n<p>为了区分这两种情况，引入了顶层const和底层const两种类型，</p>\n<pre><code class=\"language-text-plain\"> p  &lt;--- p是指向i的指针，如果p是const的话，就叫顶层const，顶层const的写法   int* const p = i; ,const 直接修饰的p，\n \n |\n v\n\n i  &lt;--- 如果i 是const的话，就是底层const， 底层const的写法 ： const int * p = i; ,const 直接修饰的是int，代表指向的是常量的int类型\n\n</code></pre>\n<h3 id=\"9stdunordered_map-查找指定key是否存在\"><strong>9.std::unordered_map 查找指定key是否存在</strong></h3>\n<p>使用<code>count(key)</code>方法，如果key存在，返回1，如果不存在，返回0</p>\n<h3 id=\"8stdmap有序\"><strong>8.std::map有序</strong></h3>\n<p>std::map是有序的，但是不是插入的顺序，而是按照key的值进行排序的，默认是从小到大排序，可以通过模版参数的第三个参数指定排序类型</p>\n<h3 id=\"7c计时\"><strong>7.c++计时</strong></h3>\n<pre><code class=\"language-cpp\">1.包含头文件\n#include &lt;chrono&gt;\n\n2.计时开始位置添加\nstd::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; time_begin = std::chrono::high_resolution_clock::now();\n\n3.计时结束位置添加\nlong long eclipse_time = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::high_resolution_clock::now() - time_begin).count();\n          \n4.eclipse_time即为统计的时间，单位是ms\n</code></pre>\n<h3 id=\"6各种类型的最大最小值宏定义\"><strong>6.各种类型的最大最小值宏定义</strong></h3>\n<p>包含头文件</p>\n<pre><code class=\"language-cpp\">#include &lt;float.h&gt;  //double float 需要用到这个\n#include &lt;limits.h&gt; //int longlong long 需要用这个\n</code></pre>\n<p>下边是具体的最大最小值的宏定义</p>\n<pre><code class=\"language-cpp\">int   n1　=　INT_MIN;\nint   n2　=　INT_MAX;\nfloat　f1　=　FLT_MIN;\nfloat　f2　=　FLT_MAX;\ndouble　d1　=　DBL_MIN;\ndouble　d2　=　DBL_MAX;\nlong ln1 =  LONG_MAX;\nlong ln2 =  LONG_MIN;\nlong long lln1 = LONG_LONG_MAX;\nlong long lln1 = LONG_LONG_MIN;\n</code></pre>\n<h3 id=\"5condition_variable\"><strong>5.condition_variable</strong></h3>\n<p>wait_for可以指定等待时间，用来实现定时器效果</p>\n<p>下边的代码，可以通过condition.signal()来唤醒阻塞的线程，其他时候会到一秒钟自动唤醒，但是这种可能会有假唤醒的时候，如果要避免假唤醒，可以再传递一个函数，返回bool类型。</p>\n<pre><code class=\"language-cpp\">std::unique_lock&lt;std::mutex&gt; sleep_lock(mutex_);\ncondition.wait_for(sleep_lock, std::chrono::milliseconds(1000));\n</code></pre>\n<h3 id=\"4运算符优先级\"><strong>4.运算符优先级</strong></h3>\n<pre><code class=\"language-text-plain\">\n*乘 /除\n\n+加 -减\n\n&gt;大于 &lt;小于\n\n==等于 !=不等于\n\n&amp;&amp;与 \n\n||或\n</code></pre>\n<h3 id=\"3stdunique_lock-与-stdlock_guard的区别\"><strong>3.std::unique_lock 与 std::lock_guard的区别</strong></h3>\n<p>unique_lock可以随时释放锁，调用unlock()</p>\n<p>lock_guard需要等到生命周期结束后，才能自动释放锁。</p>\n<pre><code class=\"language-cpp\">用法示例：\n    {\n        std::unique_lock&lt;std::mutex&gt; lock_get_lane_data(mutex_lan_date_msg_);\n        //lock_get_lane_data.unlock();\n    }\n</code></pre>\n<h3 id=\"将double转换成string时保留15位小数\"><strong>将double转换成string时保留15位小数</strong></h3>\n<pre><code class=\"language-cpp\">#include &lt;iomanip&gt;\n#include &lt;sstream&gt;\n\ndouble ceshi = std::stod(&quot;3.123456789&quot;);\nstringstream ss;\nss &lt;&lt; std::setprecision(15) &lt;&lt; ceshi;\nstd::string ceshi_str = ss.str();\ncout &lt;&lt; ceshi_str &lt;&lt;endl;\n</code></pre>\n<p>java中</p>\n<pre><code class=\"language-text-plain\">其中String s=String.format(&quot;%.2f&quot;,d)表示小数点后任意两位小数，其中2为表示两位小数，若需要三位小数，把2改为3即可，其他同理。\n</code></pre>\n<p>c++ primer 5th p600</p>\n<h3 id=\"使用ms后缀\"><strong>使用ms后缀</strong></h3>\n<pre><code class=\"language-cpp\">#include &lt;chrono&gt;\nusing namespace std::chrono_literals;\n</code></pre>\n<h3 id=\"使用sstream输出-unsigned-char存储的数字\"><strong>使用sstream输出 unsigned char存储的数字</strong></h3>\n<p>为了节省存储空间，经常会用usigned char来存储一些数值范围比较小的数字，当用ostringstream转换成string时会出现问题，举例如下</p>\n<pre><code class=\"language-cpp\">unsinged char a = 10;\nstd::ostringstream oss;\noss &lt;&lt; a;\ncout &lt;&lt; oss.str(); //输出换行\n</code></pre>\n<p>这里标准输出打印的并不是“10”，而是会换行，因为a的类型是char，所以会把a的值作为ascii码的值，转换成string，要想输出“10”，需要强转a成int类型</p>\n<pre><code class=\"language-cpp\">unsinged char a = 10;\nstd::ostringstream oss;\noss &lt;&lt; (int)a;\ncout &lt;&lt; oss.str(); //输出10\n</code></pre>\n<h2 id=\"opencv\">OpenCV</h2>\n<h3 id=\"3本地cmake加入opencv库\"><strong>3.本地cmake加入opencv库</strong></h3>\n<pre><code class=\"language-cmake\">find_package(OpenCV REQUIRED)  #注意大小写\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n  ${OpenCV_INCLUDE_DIRS}\n)\n\ntarget_link_libraries(\n  ${PROJECT_NAME}\n  ${OpenCV_LIBS}\n)\n</code></pre>\n<h3 id=\"2编译安卓ndk库\"><strong>2.编译安卓ndk库</strong></h3>\n<p>从github下载源码，进入到源码跟目录，创建build文件夹，进入build文件夹，执行下边的编译指令</p>\n<pre><code class=\"language-sh\">export ANDROID_NDK=/Users/liushichao/Library/Android/sdk/ndk/21.0.6113669\nexport ANDROID_ABI=armeabi-v7a\nexport ANDROID_NATIVE_API_LEVEL=android-28\nexport ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-clang\n\ncmake\t\t\t       \\\n  -DANDROID_NDK=${ANDROID_NDK} \\\n  -DANDROID_ABI=${ANDROID_ABI} \\\n  -DANDROID_STL=c++_shared  \\\n  -DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL} \\\n  -DBUILD_SHARED_LIBS=1 \\\n  -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \\\n  -DANDROID_TOOLCHAIN_NAME=${ANDROID_TOOLCHAIN_NAME} \\\n  -D BUILD_opencv_java=ON \\\n  -D BUILD_ANDROID_PROJECTS=ON \\\n        -D WITH_CUDA=OFF \\\n        -D WITH_MATLAB=OFF \\\n        -D BUILD_ANDROID_EXAMPLES=OFF \\\n        -D BUILD_DOCS=OFF \\\n        -D CMAKE_BUILD_TYPE=Release \\\n        -D BUILD_PERF_TESTS=OFF \\\n        -D BUILD_TESTS=OFF \\\n        -DCMAKE_INSTALL_PREFIX=&quot;/Users/liushichao/source/opencv/install_ndk&quot; \\\n  ..\n\nmake -j8\nmake install\n</code></pre>\n<h3 id=\"1注意cvmat的宽高参数\"><strong>1.注意cv::Mat()的宽高参数</strong></h3>\n<p>前边是高，后边是宽，不要弄反了</p>\n<pre><code class=\"language-cpp\">Mat (int rows, int cols, int type);\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "C++"
            ],
            "date_published": "2022-12-13T13:34:58-05:00",
            "date_modified": "2022-12-13T13:42:39-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/cmake/",
            "url": "https://liushuya7.github.io/wiki/cmake/",
            "title": "CMake",
            "summary": "CMake Reference/Tutorial Step 2: Adding a Library Step 3: Adding Usage Requirements for a Library Step 4: Installing and Testing Step 9: Selecting Static or&hellip;",
            "content_html": "<h2 id=\"cmake-referencetutorial\"><a href=\"https://cmake.org/cmake/help/latest/index.html#\">CMake Reference/Tutorial</a></h2>\n<ul>\n<li><p><a href=\"https://cmake.org/cmake/help/latest/guide/tutorial/Adding%20a%20Library.html\">Step 2: Adding a Library</a></p>\n</li>\n<li><p><a href=\"https://cmake.org/cmake/help/latest/guide/tutorial/Adding%20Usage%20Requirements%20for%20a%20Library.html\">Step 3: Adding Usage Requirements for a Library</a></p>\n</li>\n<li><p><a href=\"https://cmake.org/cmake/help/latest/guide/tutorial/Installing%20and%20Testing.html\">Step 4: Installing and Testing</a></p>\n<ul>\n<li><a href=\"https://cmake.org/cmake/help/latest/guide/tutorial/Installing%20and%20Testing.html#install-rules\">Install Rules</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://cmake.org/cmake/help/latest/guide/tutorial/Selecting%20Static%20or%20Shared%20Libraries.html\">Step 9: Selecting Static or Shared Libraries</a></p>\n</li>\n<li><p><a href=\"https://cmake.org/cmake/help/latest/guide/tutorial/Adding%20Generator%20Expressions.html\">Step 10: Adding Generator Expressions</a></p>\n</li>\n<li><p><a href=\"https://cmake.org/cmake/help/latest/guide/tutorial/Adding%20Export%20Configuration.html\">Step 11: Adding Export Configuration</a></p>\n</li>\n<li><p><a href=\"https://cmake.org/cmake/help/latest/guide/tutorial/Packaging%20Debug%20and%20Release.html\">Step 12: Packaging Debug and Release</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/68734757\">CMake Suggestions on Stackoverflow</a></p>\n</li>\n</ul>\n<h3 id=\"1-指定第三方库的查找路径\"><strong>1. 指定第三方库的查找路径</strong></h3>\n<p>可以使用<code>CMAKE_PREFIX_PATH</code>变量指定第三方库的查找路径（指定的安装路径）</p>\n<pre><code class=\"language-text-x-sh\">cd build\ncmake -DCMAKE_PREFIX_PATH=/Users/josh/my_install_dir ..\nmake\n# OR\ncmake --install . --prefix ${PATH_TO_INSTALL}\n</code></pre>\n<h3 id=\"2-在源文件中检查某个符号是否是函数变量宏定义-checksymbolexists\"><strong>2. 在源文件中检查某个符号是否是函数/变量/宏定义</strong> <a href=\"https://cmake.org/cmake/help/latest/module/CheckSymbolExists.html\"><strong>CheckSymbolExists</strong></a></h3>\n<pre><code class=\"language-text-plain\">在c中用\nCheckSymbolExists \n在cpp中用\nCheckCXXSymbolExists\n</code></pre>\n<h3 id=\"3-add_subdirectory用法\"><strong>3. add_subdirectory用法</strong></h3>\n<p>直接指定要链接的子目录文件夹的相对路径即可，但是还要自己指定头文件</p>\n<pre><code class=\"language-text-x-cmake\">add_subdirectory(\n  lib/sgmnv_tool\n)\n\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n  lib/sgmnv_tool/include\n)\n\ntarget_link_libraries(\n  ${PROJECT_NAME}\n  sgmnv_tool\n)\n</code></pre>\n<h3 id=\"4-target_link_directories\"><strong>4. target_link_directories</strong></h3>\n<p>可以配置库文件的查找目录，跟target_include_directories的效果类似</p>\n<pre><code class=\"language-text-x-cmake\">target_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n  src/\n  src/rpc\n  src/protobuf/\n  src/grpcs/\n  ${OpenCV_INCLUDE_DIRS}\n  lib/sgmnv_tool/include\n)\n\ntarget_link_libraries(\n  ${PROJECT_NAME}\n  protobuf::libprotobuf\n  gRPC::grpc++_reflection\n  gRPC::grpc++\n  ${OpenCV_LIBS}\n  # sgmnv_tool\n)\n</code></pre>\n<h3 id=\"5-file命令\"><strong>5. file命令</strong></h3>\n<p>file命令可以使用通配符表达式方便的获取某一个文件夹下的全部源文件，例如</p>\n<pre><code class=\"language-text-plain\">file(GLOB_RECURSE GRPC_SOURCES_FILE\n  src/protobuf/*.cc\n  src/rpc/*.cc\n)\n\nadd_library(\n  ${PROJECT_NAME}\n  SHARED\n  ${GRPC_SOURCES_FILE})\n</code></pre>\n<h3 id=\"6-make打印过程中的信息\"><strong>6. make打印过程中的信息</strong></h3>\n<pre><code class=\"language-text-plain\">make VERBOSE=1\n</code></pre>\n<h3 id=\"7-generator-expression\"><strong>7. generator expression</strong></h3>\n<p>参考链接： <a href=\"https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#string-valued-generator-expressions\">https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#string-valued-generator-expressions</a></p>\n<p>表达式的样式 <code>$&lt;...&gt;</code></p>\n<p>调试方法</p>\n<p>因为生成表达式是在编译阶段生成的，不是在执行cmake阶段生成的，所以不能用message显示，可以用下边的方法显示</p>\n<pre><code class=\"language-text-plain\">add_custom_target(genexdebug COMMAND ${CMAKE_COMMAND} -E echo &quot;$&lt;...&gt;&quot;)\n或者\nfile(GENERATE OUTPUT filename CONTENT &quot;$&lt;...&gt;&quot;)\n</code></pre>\n<h3 id=\"8-cache\"><strong>8. cache</strong></h3>\n<p>作用：缓存变量的值，在整个项目的的编译中都可以读取，一次缓存，多次编译都能读取，这个是存在build目录下CMakeCache.txt文件中的</p>\n<p>通过set命令可以设置缓存，如果不加FORCE选项的话不会覆盖之前的值</p>\n<pre><code class=\"language-text-plain\">  set(my_cache &quot;lala&quot; CACHE STRING &quot;test cmake cache.&quot; FORCE)\n</code></pre>\n<p>通过unset可以删除这个缓存变量</p>\n<pre><code class=\"language-text-plain\">unset(my_cache CACHE)\n</code></pre>\n<h3 id=\"9-find_package\"><strong>9. find_package()</strong></h3>\n<p>作用：查找已经安装的包，首先在<code>${CMAKE_MODULE_PATH}</code>中查找，Findxxx.cmake，然后在<code>&lt;CMAKE_ROOT&gt;/share/cmake-x.y/Modules/</code>中查找Findxxx.cmake，如果这两个文件中都找不到Findxxx.cmake，则查找xxxConfig.cmake 或者xxx-config.cmake。</p>\n<p>设置查找文件夹路径</p>\n<pre><code class=\"language-text-plain\">set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} &quot;${CMAKE_SOURCE_DIR}/cmake/Modules/&quot;)\n</code></pre>\n<p>找到后，会设置以下几个变量</p>\n<pre><code class=\"language-text-plain\">xxx_FOUND\nxxx_INCLUDE_DIRS or _INCLUDES\nxxx_LIBRARIES or _LIBRARIES or _LIBS\nxxx_DEFINITIONS\n</code></pre>\n<h3 id=\"9-add_definitions\"><strong>9. add_definitions</strong></h3>\n<p>作用：在原文件中定义指定的宏，示例如下</p>\n<pre><code class=\"language-text-plain\">OPTION(USE_MACRO\n  &quot;Build the project using macro&quot;\n  OFF)\n\nif(USE_MACRO)\n\n add_definitions(&quot;-DUSE_MACRO&quot;)\n\nendif(USE_MACRO)\n</code></pre>\n<p>使用时</p>\n<pre><code class=\"language-text-plain\">开启：　cmake 　-DUSE_MACRO＝ON ..\n\n关闭：　cmake 　-DUSE_MACRO＝OFF ..\n</code></pre>\n<h3 id=\"10-target_compile_definitions\"><strong>10. target_compile_definitions</strong></h3>\n<p>作用：#define xxxxx zzzz</p>\n<p>用法：</p>\n<pre><code class=\"language-text-plain\">target_compile_definitions(hello PUBLIC MY_DEFINE=&quot;nihao&quot;)\n</code></pre>\n<p>如果在编译的main.cpp中，写入如下代码的话</p>\n<pre><code class=\"language-text-plain\">int main()\n{\n#ifdef MY_DEFINE\n  cout&lt;&lt; MY_DEFINE &lt;&lt; endl;\n#else\n  cout &lt;&lt; &quot;undefine&quot; &lt;&lt; endl;\n#endif\n  return 0;\n}\n</code></pre>\n<p>会输出 <code>nihao</code></p>\n<h3 id=\"11-指定编译release版本或debug版本\"><strong>11. 指定编译release版本或debug版本</strong></h3>\n<p>注意：如果不使用<code>CMAKE_BUILD_TYPE</code>参数，则默认是Debug</p>\n<pre><code class=\"language-text-plain\">-DCMAKE_BUILD_TYPE=Debug\n# OR\n-DCMAKE_BUILD_TYPE=Release\n</code></pre>\n<p>指定好<code>CMAKE_BUILD_TYPE</code>后，还要指定<code>CMAKE_CXX_FLAGS_RELEASE</code>或者<code>CMAKE_CXX_FLAGS_DEBUG</code></p>\n<pre><code class=\"language-text-plain\"># 设置Release版本的编译选项\nSET(CMAKE_CXX_FLAGS_RELEASE &quot;$ENV{CXXFLAGS} -O3 -Wall&quot;)\n# 设置Debug版本的编译选项\nSET(CMAKE_CXX_FLAGS_DEBUG &quot;$ENV{CXXFLAGS} -O0 -g -Wall&quot;)\n</code></pre>\n<p>例子：</p>\n<pre><code class=\"language-text-plain\">mkdir Release  \ncd Release  \ncmake -DCMAKE_BUILD_TYPE=Release ..  \nmake \n</code></pre>\n<pre><code class=\"language-text-plain\">mkdir Debug  \ncd Debug  \ncmake -DCMAKE_BUILD_TYPE=Debug ..  \nmake  \n</code></pre>\n<h3 id=\"12-message\"><strong>12. MESSAGE</strong></h3>\n<p>有些情况下需要指定消息的错误等级才能显示出来这个消息，用来调试用，例如</p>\n<pre><code class=\"language-text-plain\">  message(FATAL_ERROR\n        &quot;The RMW implementation has been specified as &quot;\n        &quot;&#39;${requested_rmw_implementation}&#39; &quot;\n        &quot;through the environment variable &#39;RMW_IMPLEMENTATION&#39;, &quot;\n        &quot;however this needs to match the RMW implementation &quot;\n        &quot;&#39;${default_rmw_implementation}&#39;, &quot;\n        &quot;which was specified when the &#39;rmw_implementation&#39; package was built.&quot;)\n</code></pre>\n<p>以下是全部的等级 参考链接： <a href=\"https://cmake.org/cmake/help/latest/command/message.html\">https://cmake.org/cmake/help/latest/command/message.html</a></p>\n<pre><code class=\"language-text-plain\">FATAL_ERROR\nCMake Error, stop processing and generation.\n\nSEND_ERROR\nCMake Error, continue processing, but skip generation.\n\nWARNING\nCMake Warning, continue processing.\n\nAUTHOR_WARNING\nCMake Warning (dev), continue processing.\n\nDEPRECATION\nCMake Deprecation Error or Warning if variable CMAKE_ERROR_DEPRECATED or CMAKE_WARN_DEPRECATED is enabled, respectively, else no message.\n\n(none) or NOTICE\nImportant message printed to stderr to attract user’s attention.\n\nSTATUS\nThe main interesting messages that project users might be interested in. Ideally these should be concise, no more than a single line, but still informative.\n\nVERBOSE\nDetailed informational messages intended for project users. These messages should provide additional details that won’t be of interest in most cases, but which may be useful to those building the project when they want deeper insight into what’s happening.\n\nDEBUG\nDetailed informational messages intended for developers working on the project itself as opposed to users who just want to build it. These messages will not typically be of interest to other users building the project and will often be closely related to internal implementation details.\n\nTRACE\nFine-grained messages with very low-level implementation details. Messages using this log level would normally only be temporary and would expect to be removed before releasing the project, packaging up the files, etc.\n</code></pre>\n<h3 id=\"13-file命令（神器）\"><strong>13. file命令（神器）</strong></h3>\n<p>下边命令能将opencv的全部库文件都添加到link中</p>\n<pre><code class=\"language-text-plain\">file(GLOB_RECURSE dyso &quot;/Users/liushichao/Exercise/build_opencv_4.3.0/lib/*.dylib&quot;)\ntarget_link_libraries(test_sort\n${dyso}\n)\nMESSAGE(&quot;${dyso}&quot;)\n</code></pre>\n<h3 id=\"14-if语句\"><strong>14. if语句</strong></h3>\n<p>执行<code>cmake -DUSER_DEFINE=dadah ./</code>，返回”err”.</p>\n<pre><code class=\"language-text-plain\">if(NOT &quot;${USER_DEFINE}&quot; STREQUAL &quot;dadah&quot;)\n  MESSAGE(&quot;ok.&quot;)\nelse()\n  MESSAGE(&quot;err.&quot;)\nendif()\n</code></pre>\n<h3 id=\"15-get_filename_component\"><strong>15. get_filename_component</strong></h3>\n<p>获取第二个参数的绝对路径，存到第一个参数重，执行完后 <code>ANDROID_NDK_EXPECTED_PATH</code> 中存储的事当前路径的绝对路径</p>\n<pre><code class=\"language-text-plain\">get_filename_component(ANDROID_NDK_EXPECTED_PATH\n    &quot;./&quot; ABSOLUTE)\n</code></pre>\n<h3 id=\"16-使用环境变量\"><strong>16. 使用环境变量</strong></h3>\n<p><code>$ENV{xxx}</code>可以获取环境变量<code>xxx</code></p>\n<pre><code class=\"language-text-plain\">MESSAGE(&quot;$ENV{PATH}&quot;)\n</code></pre>\n<h3 id=\"17-cmake路径\"><strong>17. cmake路径</strong></h3>\n<p>为了统一路径中的分割符windows <code>c:\\xx</code> linux <code>/usr/xxx</code>，cmake定义了统一的分割符<code>/</code>的路径表示方式，可以用file命令进行转换</p>\n<pre><code class=\"language-text-plain\">file(TO_CMAKE_PATH &quot;&lt;path&gt;&quot; &lt;variable&gt;)\nfile(TO_NATIVE_PATH &quot;&lt;path&gt;&quot; &lt;variable&gt;)\n</code></pre>\n<h3 id=\"18-指定c标准库版本\"><strong>18. 指定c++标准库版本</strong></h3>\n<pre><code class=\"language-text-plain\">cmake_minimum_required(VERSION 3.10)\n\n# set the project name and version\nproject(Tutorial VERSION 1.0)\n\n# specify the C++ standard\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n</code></pre>\n<h3 id=\"19-include命令\"><strong>19. include命令</strong></h3>\n<p>通过定义xxx.cmake，可以重用cmake的代码 可以指定包含的文件的全路径，或者让cmake去搜索，搜索顺序：1. CMAKE_MODULE_PATH变量指定的路径 2. cmake自己的Modules文件夹<code>/usr/local/Cellar/cmake/3.18.1/share/cmake/Modules</code></p>\n<pre><code class=\"language-text-plain\">include(xxx.cmake)\n</code></pre>\n<h3 id=\"20-find_path\"><strong>20. find_path()</strong></h3>\n<p>在<code>/Users/liushichao/workspace</code>下创建<code>1.txt</code>,执行下边代码，返回<code>/Users/josh/workspace</code>。 如果没有找到，返回<code>TXT_PATH-NOTFOUND</code> 这个TXT_PATH如果被设置后，以后不会被更新</p>\n<pre><code class=\"language-text-plain\">find_path(TXT_PATH &quot;1.txt&quot; /Users/josh/workspace/123 /Users/josh/workspace)\nMESSAGE(&quot;${TXT_PATH}&quot;)\n</code></pre>\n<h3 id=\"21-configure_file\"><strong>21. configure_file</strong></h3>\n<p>将输入文件，转换成输出文件，可以自定义变量，改变输出文件中的值 例如在cmakelist文件夹下定义一个foo.h.in文件，或者在其他目录里创建，然后cmakelist.txt文件中指明相对路径 在foo.h.in中可以加入如下定义</p>\n<pre><code class=\"language-text-plain\">//foo.h.in\n\n#cmakedefine XXXX &quot;@XXXX@&quot;\n@bbb@\n</code></pre>\n<p>编辑CMakeLists.txt</p>\n<pre><code class=\"language-text-plain\">//CMakeLists.txt\n\nset(bbb &quot;nihao&quot;)\nset(XXXX &quot;hahah&quot;)\nconfigure_file(foo.h.in foo.h @ONLY)\n</code></pre>\n<p>会在执行cmake命令的目录里生成foo.h文件，内容如下</p>\n<pre><code class=\"language-text-plain\">//foo.h\n\n#define XXXX &quot;hahah&quot;\nnihao\n</code></pre>\n<p>如果CMakeLists.txt文件中没有写set(bbb “nihao”) 也没写 set(XXXX “hahah”)，则生成的文件如下</p>\n<pre><code class=\"language-text-plain\">//foo.h\n\n/* #undef XXXX */\n</code></pre>\n<h3 id=\"22-cmake的function\"><strong>22. cmake的function</strong></h3>\n<p>定义如下，第一个参数是函数名，第二个参数是传入的参数</p>\n<pre><code class=\"language-text-plain\">function(func_name list)\n  MESSAGE(&quot;${list}&quot;) #abc\n  MESSAGE(&quot;${${list}}&quot;) #a;b;c\nendfunction()\n</code></pre>\n<p>调用方法如下</p>\n<pre><code class=\"language-text-plain\">set(abc a b c)\nfunc_name(abc)\n</code></pre>\n<p>输出</p>\n<pre><code class=\"language-text-plain\">abc\na;b;c\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "CMake",
                   "C++"
            ],
            "date_published": "2022-12-13T13:23:15-05:00",
            "date_modified": "2022-12-13T13:23:15-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/motion-planning/",
            "url": "https://liushuya7.github.io/wiki/motion-planning/",
            "title": "Motion Planning",
            "summary": "Tesseract Robotics | Optimization Motion Planning Tesseract wiki — Industrial Training documentation Optimal Control for Robotics",
            "content_html": "<ul>\n<li><p><a href=\"https://github.com/tesseract-robotics\">Tesseract Robotics | Optimization Motion Planning</a></p>\n</li>\n<li><p><a href=\"https://ros-industrial-tesseract.readthedocs.io/en/latest/\">Tesseract wiki — Industrial Training documentation</a></p>\n</li>\n<li><p><a href=\"https://towardsdatascience.com/optimal-control-for-robotics-part-1-4cc4ee5fb14d\">Optimal Control for Robotics</a></p>\n</li>\n</ul>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "ROS2"
            ],
            "date_published": "2022-12-13T13:11:46-05:00",
            "date_modified": "2022-12-13T13:11:46-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/rtos/",
            "url": "https://liushuya7.github.io/wiki/rtos/",
            "title": "RTOS",
            "summary": "FreeRTOS RTOS Basics: Getting Started with Microcontrollers Comparison between RTOSes Introduction to RTOS (Youtube Playlist) eProsima: RTPS/DDS Experts, the middleware experts BriscoeTech/Arduino-FreeRTOS-SAMD51: A port of&hellip;",
            "content_html": "<h2 id=\"freertos\"><a href=\"https://www.freertos.org/\">FreeRTOS</a></h2>\n<ul>\n<li><p><a href=\"https://www.seeedstudio.com/blog/2021/04/26/rtos-basics-getting-started-with-microcontrollers/\">RTOS Basics: Getting Started with Microcontrollers</a></p>\n</li>\n<li><p><a href=\"https://micro.ros.org/docs/concepts/rtos/comparison/\">Comparison between RTOSes</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLEBQazB0HUyQ4hAPU1cJED6t3DU0h34bz\">Introduction to RTOS (Youtube Playlist)</a></p>\n</li>\n<li><p><a href=\"https://www.eprosima.com/\">eProsima: RTPS/DDS Experts</a>, the middleware experts</p>\n</li>\n<li><p><a href=\"https://github.com/BriscoeTech/Arduino-FreeRTOS-SAMD51\">BriscoeTech/Arduino-FreeRTOS-SAMD51: A port of FreeRTOS that runs on Arduino Samd51 boards</a></p>\n<ul>\n<li><a href=\"https://www.arduino.cc/reference/en/libraries/freertos_samd51/\">FreeRTOS_SAMD51 - Arduino Reference</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/Rybec/pyRTOS#pyrtos-api\">Rybec/pyRTOS: RTOS written in pure Python, designed for use with CircuitPython</a></p>\n</li>\n<li><p><a href=\"https://github.com/ROBOTIS-GIT/ros2arduino\">ROBOTIS-GIT/ros2arduino: This library helps the Arduino board communicate with the ROS2 using XRCE-DDS.</a></p>\n</li>\n<li><p><a href=\"https://github.com/micro-ROS/freertos_apps\">micro-ROS/freertos_apps: Sample applications for FreeRTOS + micro-ROS</a></p>\n</li>\n<li><p><a href=\"https://www.freertos.org/2020/09/micro-ros-on-freertos.html\">micro-ROS on FreeRTOS</a></p>\n</li>\n<li><p><a href=\"https://docs.zephyrproject.org/latest/boards/arm/adafruit_trinket_m0/doc/index.html\">Adafruit Trinket M0 — Zephyr Project Documentation</a></p>\n</li>\n<li><p><a href=\"https://github.com/Seeed-Studio?language=arduino\">Seeed Studio</a> Github</p>\n</li>\n</ul>\n<h2 id=\"armmbed\">ARMmbed</h2>\n<ul>\n<li><a href=\"https://github.com/ARMmbed/mbed-os\">ARMmbed/mbed-os: Arm Mbed OS is a platform operating system designed for the internet of things</a></li>\n<li><a href=\"https://github.com/mROS-base/mros2\">mROS-base/mros2: agent-less and lightweight communication library compatible with rclcpp for embedded devices</a></li>\n<li><a href=\"https://github.com/mROS-base/mros2-mbed\">mROS-base/mros2-mbed</a></li>\n<li><a href=\"https://github.com/embedded-software-laboratory\">i11, RWTH Aachen</a></li>\n</ul>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "ROS2"
            ],
            "date_published": "2022-12-13T13:08:18-05:00",
            "date_modified": "2022-12-13T13:08:18-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/migrating-from-ros1/",
            "url": "https://liushuya7.github.io/wiki/migrating-from-ros1/",
            "title": "Migrating from ROS1",
            "summary": "How-to: build ros-noetic on Ubuntu 22.04 set(CMAKE_CXX_STANDARD 14) find_package(ament_cmake REQUIRED) find_package(component1 REQUIRED) # ... find_package(componentN REQUIRED) # At the bottom of the file: ament_package() Code&hellip;",
            "content_html": "<p><a href=\"https://wikis.nyu.edu/display/ARPL/How-to%3A+build+ros-noetic+on+Ubuntu+22.04\">How-to: build ros-noetic on Ubuntu 22.04</a></p>\n<h3 id=\"package-manifests\">Package manifests</h3>\n<h3 id=\"cmakeliststxt\">CMakeLists.txt</h3>\n<ul>\n<li>Start by enabling C++14</li>\n</ul>\n<pre><code class=\"language-cmake\">set(CMAKE_CXX_STANDARD 14)\n\nfind_package(ament_cmake REQUIRED)\nfind_package(component1 REQUIRED)\n# ...\nfind_package(componentN REQUIRED)\n\n\n# At the bottom of the file:\nament_package()\n</code></pre>\n<h3 id=\"code\">Code</h3>\n<ul>\n<li><a href=\"https://docs.ros2.org/galactic/api/geometry_msgs/index-msg.html\">geometry_msgs</a>/msg/TransformStamped.msg<ul>\n<li>ROS1 <code>#include &lt;geometry_msgs/TransformStamped.h&gt;</code></li>\n<li>ROS2 <code>#include &lt;geometry_msgs/msg/transform_stamped.hpp&gt;</code><ul>\n<li>When defining customized *.msg, should not use <code>CamelCase</code>, rather, should use <code>camel_case</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "ROS2"
            ],
            "date_published": "2022-12-13T12:49:23-05:00",
            "date_modified": "2022-12-13T12:59:54-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/ros2-debuging/",
            "url": "https://liushuya7.github.io/wiki/ros2-debuging/",
            "title": "ROS2 Debuging",
            "summary": "VSCode Microsoft VScode Extension for ROS Debugging ROS C++ nodes VSCode ROS2 Workspace Template VScode debug ROS cpp 程序设置 断点调试",
            "content_html": "<h2 id=\"vscode\">VSCode</h2>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-iot.vscode-ros\">Microsoft VScode Extension for ROS</a></li>\n<li><a href=\"https://github.com/ms-iot/vscode-ros/blob/master/doc/debug-support.md\">Debugging ROS C++ nodes</a></li>\n<li><a href=\"https://github.com/athackst/vscode_ros2_workspace\">VSCode ROS2 Workspace Template</a></li>\n<li><a href=\"https://blog.csdn.net/abc_orange/article/details/102665792\">VScode debug ROS cpp 程序设置 断点调试</a></li>\n</ul>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "ROS2"
            ],
            "date_published": "2022-12-13T12:48:21-05:00",
            "date_modified": "2022-12-13T12:59:46-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/gazebo-simulation/",
            "url": "https://liushuya7.github.io/wiki/gazebo-simulation/",
            "title": "Gazebo Simulation",
            "summary": "Gazebo Garden ros_gz, Integration between ROS and Gazebo simulation gz_ros2_control Only works with gazebo fortress, not with garden yet Tutorials Install Ubuntu Source Install(Garden) Spawn&hellip;",
            "content_html": "<ul>\n<li><a href=\"https://gazebosim.org/docs/garden/install_ubuntu_src\">Gazebo Garden</a></li>\n<li><a href=\"https://github.com/gazebosim/ros_gz/tree/ros2\">ros_gz</a>, Integration between ROS and Gazebo simulation</li>\n<li><a href=\"https://github.com/ros-controls/gz_ros2_control\">gz_ros2_control</a><ul>\n<li>Only works with gazebo fortress, not with garden yet</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tutorials\">Tutorials</h2>\n<h3 id=\"install\">Install</h3>\n<ul>\n<li><a href=\"https://gazebosim.org/docs/garden/install_ubuntu_src\">Ubuntu Source Install</a>(Garden)</li>\n</ul>\n<h3 id=\"spawn-urdf\"><a href=\"https://gazebosim.org/docs/fortress/spawn_urdf\">Spawn Urdf</a></h3>\n<p>Start by launching an empty world in Gazebo Sim:</p>\n<pre><code class=\"language-text-x-sh\">ign sim empty.sdf\n</code></pre>\n<p>The following command spawns the URDF file <code>rrbot.urdf</code> into the Gazebo Sim world as a model named <code>urdf_model</code>:</p>\n<pre><code class=\"language-text-x-sh\">ign service -s /world/empty/create --reqtype gz.msgs.EntityFactory --reptype gz.msgs.Boolean --timeout 1000 --req &#39;sdf_filename: &quot;/home/josh/ros2_gazebo_ws/src/gazebo_ros_demos/rrbot_description/urdf/rrbot.urdf&quot;, name: &quot;urdf_model&quot;&#39;\n</code></pre>\n<h3 id=\"the-gui--manipulating-models\"><a href=\"https://gazebosim.org/docs/fortress/gui\">The Gui</a> &amp; <a href=\"https://gazebosim.org/docs/fortress/manipulating_models\">Manipulating Models</a></h3>\n<p>Start by launching a sample world:</p>\n<pre><code class=\"language-text-x-sh\">ign sim shapes.sdf\n</code></pre>\n<h3 id=\"topic\">Topic</h3>\n<p>Publish a message to gazebo using command line:</p>\n<pre><code class=\"language-text-x-sh\">gz topic -t /model/conveyor/link/section_0/track_cmd_vel --msgtype gz.msgs.Double -p data:10\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "ROS2"
            ],
            "date_published": "2022-12-13T01:08:47-05:00",
            "date_modified": "2022-12-13T01:08:47-05:00"
        }
    ]
}
