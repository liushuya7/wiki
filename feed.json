{
    "version": "https://jsonfeed.org/version/1",
    "title": "Joshua Personal Notes",
    "description": "",
    "home_page_url": "https://liushuya7.github.io/wiki",
    "feed_url": "https://liushuya7.github.io/wiki/feed.json",
    "user_comment": "",
    "author": {
        "name": "Joshua Liu"
    },
    "items": [
        {
            "id": "https://liushuya7.github.io/wiki/git/",
            "url": "https://liushuya7.github.io/wiki/git/",
            "title": "Git",
            "summary": "Useful Links Git Branches Tips Github CLI, brings GitHub to your terminal Move files from one repository to another, preserving git history vcstool – working&hellip;",
            "content_html": "<h2 id=\"useful-links\">Useful Links</h2>\n<ul>\n<li><a href=\"https://www.nobledesktop.com/learn/git/git-branches\"><strong>Git</strong> <strong>Branches</strong> Tips</a></li>\n<li><a href=\"https://cli.github.com/\">Github CLI</a>, brings GitHub to your terminal</li>\n<li><a href=\"https://medium.com/@ayushya/move-directory-from-one-repository-to-another-preserving-git-history-d210fa049d4b\">Move files from one repository to another, preserving git history</a></li>\n</ul>\n<h3 id=\"vcstool--working-with-multiple-repositories\"><a href=\"https://github.com/dirk-thomas/vcstool\">vcstool</a> – working with multiple repositories</h3>\n<pre><code class=\"language-bash\">vcs import --input file_name.repos # or URL\n</code></pre>\n<h3 id=\"createrename-a-branch\">Create/Rename a Branch</h3>\n<p>Use <a href=\"https://stackoverflow.com/a/34100189\"><code>git switch --orphan &lt;new branch&gt;</code></a> to create an empty branch with no history.</p>\n<pre><code class=\"language-bash\">git switch --orphan &lt;new branch&gt;\ngit commit --allow-empty -m &quot;Initial commit on orphan branch&quot;\ngit push -u origin &lt;new branch&gt;\n</code></pre>\n<p>Move/Change current branch name (e.g. to ‘main’)</p>\n<pre><code class=\"language-bash\">git branch -M main\n</code></pre>\n<h3 id=\"git-pull-over-all-subdirectories\"><a href=\"https://stackoverflow.com/a/38291944/3547352\"><code>git pull</code> over all subdirectories</a></h3>\n<pre><code class=\"language-bash\">for d in *; do (cd $d &amp;&amp; git pull --ff-only); done\n</code></pre>\n<h3 id=\"submodule\">Submodule</h3>\n<ul>\n<li><a href=\"https://github.blog/2016-02-01-working-with-submodules/\">Working with submodules</a></li>\n</ul>\n<pre><code class=\"language-bash\">git submodule update --init --recursive\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Git"
            ],
            "date_published": "2022-12-14T20:56:45-05:00",
            "date_modified": "2022-12-15T00:17:47-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/wen-jian-quan-xian-dai-ma-jie-shi/",
            "url": "https://liushuya7.github.io/wiki/wen-jian-quan-xian-dai-ma-jie-shi/",
            "title": "文件权限代码解释",
            "summary": "执行 ls -l 出现下列提示： liushichao@computername main_proj % ls -l total 0 -rw-r--r-- 1 liushichao staff 0 11 26 18:25 CMakelists.txt drwxr-xr-x 2 liushichao staff 64&hellip;",
            "content_html": "<p>执行 ls -l 出现下列提示：</p>\n<pre><code class=\"language-bash\">liushichao@computername main_proj % ls -l\ntotal 0\n-rw-r--r--  1 liushichao  staff    0 11 26 18:25 CMakelists.txt\ndrwxr-xr-x  2 liushichao  staff   64 11 26 17:25 include\ndrwxr-xr-x  5 liushichao  staff  160 11 26 17:49 sgmm-doc\ndrwxr-xr-x  2 liushichao  staff   64 11 26 17:25 src\n</code></pre>\n<p>其中 <code>drwxr-xr-x</code> 代表文件权限，具体每个字母的含义</p>\n<p>理解的时候将后边每三个分成一组</p>\n<pre><code class=\"language-bash\">d             rwx            r-x                r-x\n|             |              |                  |\n代表是目录      当前用户权限     当前用户组权限       其他用户权限\n</code></pre>\n<p>d代表是目录，如果是文件的话，这个位置为`-``，如第一行所示</p>\n<pre><code class=\"language-bash\">-rw-r--r--  1 liushichao  staff    0 11 26 18:25 CMakelists.txt\n</code></pre>\n<p>其中 <code>rwx</code> 的含义为</p>\n<pre><code class=\"language-text-plain\">r 读权限\nw 写权限\nx 可执行权限\n</code></pre>\n<p>如果某一个权限是<code>-</code>，代表没有那个权限</p>\n<p>rwx可以用二进制表示，有权限的地方为1，没权限的位置为0</p>\n<p>rwx可以表示为111，转换成十进制为7</p>\n<p>r–可以表示为100，对应十进制4</p>\n<p>--x二进制为001，十进制为1</p>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Linux"
            ],
            "date_published": "2022-12-14T20:52:43-05:00",
            "date_modified": "2022-12-15T00:18:00-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/bash-scripting/",
            "url": "https://liushuya7.github.io/wiki/bash-scripting/",
            "title": "Bash Scripting",
            "content_html": "<object data=\"https://liushuya7.github.io/wiki/media/posts/20/Bash Scripting.pdf\" type=\"application/pdf\" width=\"100%\" height=\"800px\">\n    <embed src=\"https://liushuya7.github.io/wiki/media/posts/20/Bash Scripting.pdf\"></embed>\n</object>",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Linux"
            ],
            "date_published": "2022-12-14T20:41:21-05:00",
            "date_modified": "2022-12-15T00:18:08-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/linux/",
            "url": "https://liushuya7.github.io/wiki/linux/",
            "title": "Linux",
            "summary": "Useful Links Linux Guide How To Set Up SSH Keys How to Install The Latest Mesa Graphics Driver in Ubuntu 20.04 / 21.04 Make Linux/Unix&hellip;",
            "content_html": "<h2 id=\"useful-links\">Useful Links</h2>\n<ul>\n<li><a href=\"https://github.com/mikeroyal/Linux-Guide\">Linux Guide</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-2\">How To Set Up SSH Keys</a></li>\n<li><a href=\"https://ubuntuhandbook.org/index.php/2021/07/install-latest-mesa-ubuntu-20-04-21-04/\"><strong>How to Install The Latest Mesa Graphics Driver in Ubuntu 20.04 / 21.04</strong></a></li>\n<li><a href=\"https://www.cyberciti.biz/tips/finding-bash-perl-python-portably-using-env.html\">Make Linux/Unix Script Portable With #!/usr/bin/env As a Shebang</a></li>\n</ul>\n<h2 id=\"quick-reference\">Quick Reference</h2>\n<ul>\n<li><code>xdg-open</code> - <a href=\"https://linux.die.net/man/1/xdg-open\">opens a file or URL in the user’s preferred application</a></li>\n</ul>\n<h4 id=\"tar命令\"><code>**tar**</code>命令</h4>\n<pre><code class=\"language-bash\"># 压缩\ntar -cfv out.tar source.file\n# 解压\ntar xfv out.tar\ntar xfvz out.tgz --directory unzip_dir\n</code></pre>\n<ul>\n<li><strong>断开ssh</strong><ul>\n<li><code>logout</code> or CTRL+D</li>\n</ul>\n</li>\n<li><strong>拷贝到远程</strong><ul>\n<li><code>scp -r /home/Downloads/source_file root@www.runoob.com:/home/root/others/</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"working-with-files\">Working with files</h4>\n<h5 id=\"using-placeholders-can-be-used-with-cmd-such-as-ls-rm-mv-etc\">Using placeholders (can be used with cmd such as <code>ls</code>, <code>rm</code>, <code>mv</code> etc)</h5>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Placeholder</strong></td>\n<td><strong>Meaning</strong></td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>Any set of characters</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>Any single character</td>\n</tr>\n<tr>\n<td><code>[a-f]</code></td>\n<td>Characters in [abcdef]</td>\n</tr>\n<tr>\n<td><code>[^a-c]</code></td>\n<td>Any character <strong>not</strong> in [abc]</td>\n</tr>\n</tbody></table>\n<p>Example:</p>\n<pre><code class=\"language-bash\">1 $ ls\n2 u01.tex v01.pdf v01.tex\n3 u02.tex v02.pdf v02.tex\n4 u03.tex v03.pdf v03.tex\n5\n6 $ ls *. pdf\n7 v01.pdf v02.pdf v03.pdf\n8\n9 $ ls u*\n10 u01.tex u02.tex u03.tex\n11\n12 [/home/student/Examples/placeholders]$ ls ?01*\n13 u01.tex v01.pdf v01.tex\n14\n15 [/home/student/Examples/placeholders]$ ls [uv]01*\n16 u01.tex v01.pdf v01.tex\n17\n18 [/home/student/Examples/placeholders]$ ls u0[^12].tex\n19 u03.tex\n</code></pre>\n<h5 id=\"searching\">Searching</h5>\n<pre><code class=\"language-bash\">$ find &lt;in-folder&gt; -name &lt;filename&gt;\n    Search for file &lt;filename&gt; in folder &lt;in-folder&gt;, allows wildcards\n\n$ locate &lt;filename&gt;\n    Search for file &lt;filename&gt; in the entire system! (just remember to &lt;sudo updatedb&gt; often)\n\n$ grep &lt;what&gt; &lt;where&gt;\n    Search for a string &lt;what&gt; in a file &lt;where&gt;\n</code></pre>\n<h5 id=\"chaining-commands\">Chaining commands</h5>\n<pre><code class=\"language-bash\">$ command1; command2; command3\n    Calls commands one after another\n\n$ command1 &amp;&amp; command2 &amp;&amp; command3\n    Same as above but fails if any of the commands returns an error code\n\n$ command1 | command2 | command3\n    Pipe stdout of command1 to stdin of command2\n and stdout of command2 to stdin of command3\n    Piping commonly used with grep:\n    \n$ ls | grep smth\n    look for smth in output of ls\n</code></pre>\n<h3 id=\"useful-links-1\">Useful Links</h3>\n<ul>\n<li><a href=\"https://phoenixnap.com/kb/setup-passwordless-ssh\">How to Set Up Passwordless SSH Login</a>(Good Security)</li>\n<li><a href=\"https://www.cyberciti.biz/faq/how-to-disable-ssh-password-login-on-linux/\">How to disable ssh password login on Linux to increase security</a></li>\n</ul>\n<h2 id=\"embedded-linux\">Embedded Linux</h2>\n<p><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://liushuya7.github.io/wiki/media/posts/19/embedded-linux.png\" alt=\"embedded linux\" width=\"1200\" height=\"348\"  sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://liushuya7.github.io/wiki/media/posts/19/responsive/embedded-linux-xs.png 300w ,https://liushuya7.github.io/wiki/media/posts/19/responsive/embedded-linux-sm.png 480w ,https://liushuya7.github.io/wiki/media/posts/19/responsive/embedded-linux-md.png 768w\"></figure></p>\n<h2 id=\"touch-screen-setup\">Touch Screen Setup</h2>\n<p><a href=\"https://unix.stackexchange.com/questions/473721/calibrating-a-touch-screen-on-dual-monitors-one-touch-one-not\">Calibrating a touch-screen on dual monitors</a></p>\n<p>In terminal, type:</p>\n<pre><code class=\"language-bash\">xinput --map-to-output $(xinput list --id-only &quot;Wacom TouchScreen Finger touch&quot;) USB-C-0\n</code></pre>\n<p>For HUION Drawing Tablet</p>\n<pre><code class=\"language-bash\">xinput --map-to-output $(xinput list --id-only &quot;HUION Huion Tablet Pen Pen (0)&quot;) DP-4\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Linux"
            ],
            "date_published": "2022-12-14T20:30:13-05:00",
            "date_modified": "2022-12-15T00:09:21-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/biblical-hebrew/",
            "url": "https://liushuya7.github.io/wiki/biblical-hebrew/",
            "title": "Biblical Hebrew",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Biblical Hebrew"
            ],
            "date_published": "2022-12-13T20:37:03-05:00",
            "date_modified": "2022-12-13T20:37:08-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/genesis-1-in-hebrew/",
            "url": "https://liushuya7.github.io/wiki/genesis-1-in-hebrew/",
            "title": "Genesis 1 in Hebrew",
            "summary": "Ch 1 v1-2 v3-5 v6-8 v9-10 v11-13 Download Click Here to download the PDF.",
            "content_html": "<h2 id=\"ch-1\">Ch 1</h2>\n<h3 id=\"v1-2\">v1-2</h3>\n<div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D1ge6-3R_8s?clip=Ugkx8dfmHWYH3b9rXLBE2EeSQ1H0dDy-WMrB&amp;clipt=EIhUGOW2Ag\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\n<h3 id=\"v3-5\">v3-5</h3>\n<div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D1ge6-3R_8s?clip=Ugkxo5ftw6fR_bvjSFwk-apCU0cpJyk_Lk7j&amp;clipt=ELLLAhjS_wQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\n<h3 id=\"v6-8\">v6-8</h3>\n<div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D1ge6-3R_8s?clip=Ugkx2r36Cpbtb50fRk3vTDjCoiTy0e__hE5r&amp;clipt=ENCIBRiw8gc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\n<h3 id=\"v9-10\">v9-10</h3>\n<div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D1ge6-3R_8s?clip=UgkxwC5R_uErhDlMEWmrnnJeRbj9GpgZH7hZ&amp;clipt=EOuECBjt9gk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\n<h3 id=\"v11-13\">v11-13</h3>\n<div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D1ge6-3R_8s?clip=Ugkxh0VPlujjILpTpYViOVLe5P860sSEo7Mt&amp;clipt=ELyKChiMvg0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\n<h2 id=\"download\">Download</h2>\n<p><a href=\"https://liushuya7.github.io/wiki/media/files/Genesis_1_in_Hebrew.pdf\">Click Here</a> to download the PDF.</p>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Biblical Hebrew"
            ],
            "date_published": "2022-12-13T20:36:39-05:00",
            "date_modified": "2022-12-15T00:30:31-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/pyvistatrimesh/",
            "url": "https://liushuya7.github.io/wiki/pyvistatrimesh/",
            "title": "PyVista/Trimesh",
            "summary": "Conversion Pyvista to Trimesh Convert Pyvista 1-D face array to Trimesh faces def pyvistaToTrimeshFaces(cells): faces = [] idx = 0 while idx &lt; len(cells): curr_cell_count&hellip;",
            "content_html": "<h2 id=\"conversion\">Conversion</h2>\n<h3 id=\"pyvista-to-trimesh\">Pyvista to Trimesh</h3>\n<p>Convert Pyvista 1-D face array to Trimesh faces</p>\n<pre><code class=\"language-py\">def pyvistaToTrimeshFaces(cells):\n    faces = []\n    idx = 0\n    while idx &lt; len(cells):\n      curr_cell_count = cells[idx]\n      curr_faces = cells[idx+1:idx+curr_cell_count+1]\n      faces.append(curr_faces)\n      idx += curr_cell_count+1\n    return np.array(faces)\n</code></pre>\n<p>Reference: <a href=\"https://github.com/AbrarAnwar/cross_section_rl/blob/ffd9f6eb2c53fdceca7be916c030a853cad2b4e0/utils.py#L68\">AbrarAnwar/cross_section_rl/utils.py</a></p>\n<h3 id=\"meshlab-to-pyvista\">Meshlab to Pyvista</h3>\n<pre><code class=\"language-py\">import numpy as np\nimport pyvista as pv\n\ndef meshlab2pv(mmesh):\n    &#39;&#39;&#39;\n    Convert meshlab mesh to PyVista polydata\n    &#39;&#39;&#39;\n    mpoints, mcells = mmesh.vertex_matrix(), mmesh.face_matrix()\n\n    if len(mcells):\n        # convert the faces into PolyData format\n        mfaces = []\n        for cell in mcells:\n            face = np.hstack((len(cell), cell))\n            mfaces.extend(face.tolist())\n        mfaces = np.array(mfaces)\n        polydata = pv.PolyData(mpoints, np.hstack(mfaces))\n    else:\n        polydata = pv.PolyData(mpoints, None)\n\n    return polydata\n\nif __name__ == &#39;__main__&#39;:\n    import pymeshlab as pm\n    \n    ms = pm.MeshSet()\n    ms.load_project(&#39;data/test.mlp&#39;)\n\n    print(ms.print_status())\n\n    meshes = []\n    plotter = pv.Plotter()\n\n    for i in range(ms.number_meshes()):\n        mesh_pv = meshlab2pv(ms.mesh(i))\n        meshes.append(mesh_pv)\n        plotter.add_mesh(mesh_pv)\n\n    plotter.add_mesh_slice_orthogonal(meshes[0])\n\n    plotter.show()\n</code></pre>\n<h2 id=\"qt-gui\">Qt GUI</h2>\n<p>Pyvistaqt Example:</p>\n<pre><code class=\"language-py\">import sys\n\nfrom PyQt5 import Qt, QtCore\n\nimport pyvista as pv\nfrom pyvistaqt import QtInteractor\n\n# from pyvista import themes\n# pv.set_plot_theme(themes.DarkTheme())\n\n\nclass MainWidget(Qt.QWidget):\n\n    def __init__(self, parent=None, show=True):\n        super(MainWidget, self).__init__()\n\n        self.test_button = Qt.QPushButton(&quot;Open&quot;)\n        self.test_button.clicked.connect(self.test_button_event)\n\n        self.frame = Qt.QFrame()\n        self.plotter = QtInteractor(self.frame)\n        vlayout = Qt.QVBoxLayout()\n        vlayout.addWidget(self.plotter.interactor)\n        hlayout = Qt.QHBoxLayout()\n        hlayout.addWidget(self.test_button)\n        vlayout.addLayout(hlayout)\n        self.setLayout(vlayout)\n\n        self.setWindowTitle(&quot;Test Qt Window&quot;)\n        self.setGeometry(550, 200, 800, 600)\n\n        # Enable dragging and dropping onto the GUI\n        self.setAcceptDrops(True)\n\n        self.plotter.show_axes()\n        self.mesh = None\n\n        if show:\n            self.show()\n\n    # The following three methods set up dragging and dropping for the app\n    def dragEnterEvent(self, e):\n        if e.mimeData().hasUrls:\n            e.accept()\n        else:\n            e.ignore()\n\n    def dragMoveEvent(self, e):\n        if e.mimeData().hasUrls:\n            e.accept()\n        else:\n            e.ignore()\n\n    def dropEvent(self, e):\n        &quot;&quot;&quot;\n        Drop files directly onto the widget\n        File locations are stored in fname\n        :param e:\n        :return:\n        &quot;&quot;&quot;\n        if e.mimeData().hasUrls:\n            e.setDropAction(QtCore.Qt.CopyAction)\n            e.accept()\n            # Workaround for OSx dragging and dropping\n            for url in e.mimeData().urls():\n                fname = str(url.toLocalFile())\n            self.fname = fname\n            self.load_mesh()\n        else:\n            e.ignore()\n\n    def test_button_event(self):\n        &quot;&quot;&quot;\n        Open a mesh file\n        &quot;&quot;&quot;\n        self.fname, _ = Qt.QFileDialog.getOpenFileName(self, &#39;Open file&#39;,&#39;&#39;,&quot;(*.ply) ;; (*.stl)&quot;)\n        self.load_mesh()\n\n    def load_mesh(self):\n        self.mesh = pv.read(self.fname)\n        self.plotter.clear()\n        self.plotter.add_mesh(self.mesh, show_edges=True)\n        self.plotter.reset_camera()\n\n    def save_mesh(self):\n        &quot;&quot;&quot;\n        Save mesh\n        &quot;&quot;&quot;\n        self.fname, f_filter = Qt.QFileDialog.getSaveFileName(self, &#39;Save file&#39;, self.fname, &quot;(*.ply) ;; (*.stl)&quot;)\n        pv.save_meshio(self.fname, self.mesh, file_format=f_filter.strip(&#39;(*.)&#39;))\n        # close the window\n        self.close()\n\n\nif __name__ == &#39;__main__&#39;:\n    app = Qt.QApplication(sys.argv)\n    window = MainWidget()\n    sys.exit(app.exec_())\n</code></pre>\n<p><a href=\"https://gist.github.com/hichamjanati/6668d91848283c31ac18d801552fb582\">Optimization visualization with pyvista</a>:</p>\n<pre><code class=\"language-py\">import pyvista as pv\nimport numpy as np\n\nmake_gif = True\n\n# increase n_points for a higher resolution\nn_points = 100\nxmin, xmax = -1.2, 1.2\nbounds = 1.25 * np.array([xmin, xmax, xmin, xmax, 0., 0.])\nx = np.linspace(xmin, xmax, n_points)\ny = np.linspace(xmin, xmax, n_points)\nx, y = np.meshgrid(x, y)\ncoords = np.array(list(zip(x.flatten(), y.flatten())))\n\ng = x ** 4 + y ** 4\ng = g.flatten()\nconstraint_mask = g &lt;= 1\n\n\ndef func(x, y):\n    return x ** 3 - y ** 3 + 2\n\n\nf = func(x, y)\nf = f.flatten()\n\ndomain_coords = np.zeros((n_points ** 2, 3))\ndomain_coords[:, :2] = coords\ndomain = pv.PolyData(domain_coords)\ndomain = domain.delaunay_2d()\ndomain_in, _ = domain.remove_points(~constraint_mask)\ndomain_out, _ = domain.remove_points(constraint_mask)\n\nminimizer_array = np.array([- 0.5 ** 0.25, 0.5 ** 0.25, 0.])\nvalue_array = minimizer_array + np.array([0., 0., func(*minimizer_array[:2])])\nminimizer = pv.PolyData(minimizer_array)\ndashed = pv.Spline(np.vstack((minimizer_array, value_array)), n_points=20)\n\ncone_direction = np.array([-1., 1., 0.])\ncone = pv.Cone(minimizer_array, cone_direction, angle=60, height=20)\ncone.points[:, 2] = 0\ncone.points *= 1 / (4 * 20) ** 0.5\n\nsurface_data = np.zeros((n_points ** 2, 3))\nsurface_data[:, :2] = coords\nsurface_data[:, 2] = f\nsurface = pv.PolyData(surface_data)\nsurface = pv.PolyData(surface)\nsurface = surface.delaunay_2d()\nsurface_in, _ = surface.remove_points(~constraint_mask)\nsurface_out, _ = surface.remove_points(constraint_mask)\n\nconstraint_title = pv.Text3D(&quot;Constraint set K&quot;, depth=0.2)\nconstraint_title.points -= constraint_title.points.mean(0)[None, :]\nconstraint_title.points *= \\\n    1.75 / (constraint_title.points.max() - constraint_title.points.min())\nconstraint_title.rotate_z(90)\n\ntext3d = pv.Text3D(&quot;Minimizer x&quot;, depth=0.2)\ntext3d.points -= text3d.points.mean(0)[None, :]\ntext3d.points /= text3d.points.max() - text3d.points.min()\ntext3d.rotate_z(90)\ntext3d.rotate_y(90)\ntext3d.points += 1.75 * minimizer_array\n\ntangeant = pv.Text3D(&quot;Tangeant cone at x&quot;, depth=0.2)\ntangeant.points -= tangeant.points.mean(0)[None, :]\ntangeant.points *= 1.75 / (tangeant.points.max() - tangeant.points.min())\ntangeant.rotate_z(90)\ntangeant.rotate_x(180)\ntangeant.rotate_y(90)\ntangeant.points += np.array([-1.5, -1.5, 0])\n\nplotter = pv.Plotter()\nplotter.add_mesh(domain_out, color=&quot;gray&quot;, opacity=0.2)\nplotter.add_mesh(domain_in, color=&quot;black&quot;)\nplotter.add_mesh(surface_in, scalars=f[constraint_mask], cmap=&quot;hot&quot;)\nplotter.add_mesh(surface_out, cmap=&quot;Greys&quot;, opacity=0.2)\nplotter.add_mesh(cone, color=&quot;blue&quot;, opacity=0.3)\nplotter.add_mesh(minimizer, color=&quot;red&quot;, render_points_as_spheres=True,\n                 point_size=15)\nplotter.add_mesh(dashed, color=&quot;red&quot;)\nplotter.add_mesh(text3d, color=&quot;red&quot;)\nplotter.add_mesh(tangeant, color=&quot;black&quot;)\nplotter.add_mesh(constraint_title, color=&quot;white&quot;)\nplotter.background_color = &quot;white&quot;\nplotter.show_bounds(grid=&#39;front&#39;, location=&#39;outer&#39;,\n                    show_zaxis=False, color=&quot;black&quot;,\n                    bounds=bounds)\n\nif make_gif:\n    # when the window shows up, close it by pressing the q-Key NOT the quit\n    # button\n    plotter.show(auto_close=False)\n\n    path = plotter.generate_orbital_path(3., n_points=200,\n                                         shift=1.75 * domain_out.length)\n    plotter.open_movie(&#39;orbit.mp4&#39;)\n    plotter.orbit_on_path(path, write_frames=True)\n    plotter.close()\nelse:\n    plotter.show()\n</code></pre>\n<p><a href=\"https://gist.github.com/dgobbi/bfdb149e38777f25d0891c1b883858e2\">Simple QVTKRenderWindowInteractor example in Python</a>:</p>\n<pre><code class=\"language-py\"># coding=utf-8\n\nimport sys\n\nfrom vtkmodules.vtkFiltersSources import vtkConeSource\nfrom vtkmodules.vtkRenderingCore import vtkActor, vtkPolyDataMapper, vtkRenderer\n# load implementations for rendering and interaction factory classes\nimport vtkmodules.vtkRenderingOpenGL2\nimport vtkmodules.vtkInteractionStyle\n\nimport QVTKRenderWindowInteractor as QVTK\nQVTKRenderWindowInteractor = QVTK.QVTKRenderWindowInteractor\n\nif QVTK.PyQtImpl == &#39;PySide6&#39;:\n    from PySide6.QtCore import Qt\n    from PySide6.QtWidgets import QApplication, QMainWindow\nelif QVTK.PyQtImpl == &#39;PySide2&#39;:\n    from PySide2.QtCore import Qt\n    from PySide2.QtWidgets import QApplication, QMainWindow\nelse:\n    from PySide.QtCore import Qt\n    from PySide.QtGui import QApplication, QMainWindow\n\n\ndef QVTKRenderWidgetConeExample(argv):\n    &quot;&quot;&quot;A simple example that uses the QVTKRenderWindowInteractor class.&quot;&quot;&quot;\n    # every QT app needs an app\n    app = QApplication([&#39;QVTKRenderWindowInteractor&#39;])\n\n    window = QMainWindow()\n\n    # create the widget\n    widget = QVTKRenderWindowInteractor(window)\n    window.setCentralWidget(widget)\n    # if you don&#39;t want the &#39;q&#39; key to exit comment this.\n    widget.AddObserver(&quot;ExitEvent&quot;, lambda o, e, a=app: a.quit())\n\n    ren = vtkRenderer()\n    widget.GetRenderWindow().AddRenderer(ren)\n\n    cone = vtkConeSource()\n    cone.SetResolution(8)\n\n    coneMapper = vtkPolyDataMapper()\n    coneMapper.SetInputConnection(cone.GetOutputPort())\n\n    coneActor = vtkActor()\n    coneActor.SetMapper(coneMapper)\n\n    ren.AddActor(coneActor)\n\n    # show the widget\n    window.show()\n\n    widget.Initialize()\n    widget.Start()\n\n    # start event processing\n    # Source: https://doc.qt.io/qtforpython/porting_from2.html\n    # &#39;exec_&#39; is deprecated and will be removed in the future.\n    # Use &#39;exec&#39; instead.\n    try:\n        app.exec()\n    except AttributeError:\n        app.exec_()\n\nif __name__ == &quot;__main__&quot;:\n    QVTKRenderWidgetConeExample(sys.argv)\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-12-13T15:28:56-05:00",
            "date_modified": "2022-12-13T15:28:56-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/python/",
            "url": "https://liushuya7.github.io/wiki/python/",
            "title": "Python",
            "summary": "Collections PythonRobotics Comprehensive Python Cheatsheet Problem Solving with Python Scipy Lecture Notes Github: https://github.com/scipy-lectures/scipy-lecture-notes PythonTemplate Python Template is a Cookiecutter template for creating a python&hellip;",
            "content_html": "<h2 id=\"collections\">Collections</h2>\n<ul>\n<li><a href=\"https://github.com/AtsushiSakai/PythonRobotics\">PythonRobotics</a></li>\n<li><a href=\"https://github.com/gto76/python-cheatsheet\">Comprehensive Python Cheatsheet</a></li>\n<li><a href=\"https://problemsolvingwithpython.com/\">Problem Solving with Python</a> </li>\n<li><a href=\"https://scipy-lectures.org/\">Scipy Lecture Notes</a><ul>\n<li>Github: <a href=\"https://github.com/scipy-lectures/scipy-lecture-notes\">https://github.com/scipy-lectures/scipy-lecture-notes</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/UCL/PythonTemplate\">PythonTemplate</a><ul>\n<li>Python Template is a Cookiecutter template for creating a python project</li>\n</ul>\n</li>\n<li><a href=\"https://data36.com/linear-regression-in-python-numpy-polyfit/\">Linear Regression in Python using numpy + polyfit (with code base)</a></li>\n</ul>\n<h3 id=\"libraries\">Libraries</h3>\n<ul>\n<li><a href=\"https://pypi.org/project/cupoch/\">cupoch</a> - Robotics with GPU computing</li>\n<li><a href=\"https://github.com/neka-nat/kinpy\">kinpy</a> -Simple kinematics calculation toolkit for robotics</li>\n<li><a href=\"https://github.com/facebookresearch/pytorch3d\">PyTorch3D</a> - provides efficient, reusable components for 3D Computer Vision research with <a href=\"https://pytorch.org/\">PyTorch</a></li>\n</ul>\n<h3 id=\"tutorials\">Tutorials</h3>\n<ul>\n<li><a href=\"https://notebook.community/\">Jupyter Notebooks Gallery</a></li>\n<li><a href=\"https://notebook.community/finnhacks42/opencv-play/templates/OpenCV%20tutorial\">Learn OpenCV Jupyter notebook</a></li>\n</ul>\n<h2 id=\"quick-notes\">Quick Notes</h2>\n<h3 id=\"pip-install-from-a-git-repository\"><code>**pip install**</code> From a Git Repository</h3>\n<pre><code class=\"language-sh\">python -m pip install git+https://github.com/django/django.git@main\n</code></pre>\n<h3 id=\"pip-install-from-a-local-dir\"><code>**pip install**</code> From a local dir</h3>\n<pre><code class=\"language-sh\">pip install -e /path/to/package\n</code></pre>\n<ul>\n<li><code>-e</code> installs the package in a way, that you can edit the package, but it requires that the package source stay in the same place (<code>/path/to/package</code> in this case) forever.</li>\n</ul>\n<h3 id=\"glob通配符获取文件列表\"><code>**glob**</code>通配符获取文件列表</h3>\n<pre><code class=\"language-sh\">glob.glob(&quot;./*.jpg&quot;)\n获取当前目录下的jpg文件列表\n</code></pre>\n<h3 id=\"__init__py的作用\"><strong>__init__.py</strong>的作用</h3>\n<p>参考链接 <a href=\"https://www.cnblogs.com/lands-ljk/p/5880483.html\">https://www.cnblogs.com/lands-ljk/p/5880483.html</a></p>\n<p><strong>__init__</strong>.py 文件的作用是将文件夹变为一个Python模块,Python 中的每个模块的包中，都有__init__.py 文件。</p>\n<p>通常__init__.py 文件为空，但是我们还可以为它增加其他的功能。我们在导入一个包时，实际上是导入了它的__init__.py文件。这样我们可以在__init__.py文件中批量导入我们所需要的模块，而不再需要一个一个的导入。</p>\n<p>当导入模块时，解释器按照sys.path列表中的目录顺序来查找导入文件。</p>\n<pre><code class=\"language-py\">import sys\nprint(sys.path)\n</code></pre>\n<h2 id=\"other-tools\">Other Tools</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/53070679\">VScode Configure Python autoComplete extraPaths</a></li>\n<li><a href=\"https://stackoverflow.com/a/64690321\">Use Pylance for autoCompletion</a></li>\n<li><a href=\"https://github.com/wenmin-wu/jupyter-tabnine\">TabNine, Autocompletion for Jupyter Notebook</a></li>\n</ul>\n<h2 id=\"issues\">Issues</h2>\n<h3 id=\"编译ros提示缺少em模块\"><strong>编译ros提示缺少em模块</strong></h3>\n<pre><code class=\"language-bash\">python3 -m pip install empy\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-12-13T14:49:29-05:00",
            "date_modified": "2022-12-13T15:30:48-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/c-learning-note/",
            "url": "https://liushuya7.github.io/wiki/c-learning-note/",
            "title": "C++ Learning Note",
            "summary": "List #include &lt;list&gt; In C++ lists are ordered sequences of variables of the same type. To initialize them we have to specify which type are&hellip;",
            "content_html": "<h2 id=\"list\">List</h2>\n<pre><code class=\"language-cpp\">#include &lt;list&gt;\n</code></pre>\n<p>In C++ lists are ordered sequences of variables of the same type. To initialize them we have to specify which type are the variables inside it. For example, for a list of integer values:</p>\n<pre><code class=\"language-cpp\">list&lt;int&gt; numbers_list({1,10,100,1000});\n</code></pre>\n<p>And a list of string values:</p>\n<pre><code class=\"language-cpp\">list&lt;string&gt; vocals_list( {&quot;a&quot;,&quot;e&quot;,&quot;i&quot;,&quot;o&quot;,&quot;u&quot;} );\n</code></pre>\n<p>The inconvenience with lists in C++ is that they are not as easy to print as in other languages. In this case we need to loop over all the items in a list to print them one by one. For now, here’s an example of printing a list:</p>\n<pre><code class=\"language-cpp\">for (int val : numbers_list)             // Loop\n    cout &lt;&lt; val &lt;&lt; &quot;  &quot;;                 // Print function\n\nfor (string val : vocals_list)           // Loop\n    cout &lt;&lt; val &lt;&lt; &quot;  &quot;;                 // Print function\n</code></pre>\n<p>Lists are very useful, as they occupy a memory space that can be modified. They have builtin functions to, for example, add a new item in the beginning of the list, or at the end of it:</p>\n<pre><code class=\"language-cpp\">numbers_list.push_front(0);             //insert in the beginning\nnumbers_list.push_back(3000);           //insert in the end\n</code></pre>\n<p>The resulting list would be <code>0,1,10,100,1000,3000</code></p>\n<p>Finally, we can also concatenate a list at the end of another, enlarging the first one and not deleting the second one, with the builtin function <code>insert()</code>:</p>\n<pre><code class=\"language-cpp\">list&lt;int&gt; new_list({5,50,500});\n\nnumbers_list.insert(numbers_list.end(),new_list.begin(),new_list.end());\n</code></pre>\n<p>Then the <code>numbers_list</code> will be modified as <code>0,1,10,100,1000,3000,5,50,500</code></p>\n<h2 id=\"dictionaries\"><strong>Dictionaries</strong></h2>\n<pre><code class=\"language-cpp\">#include &lt;map&gt;\n</code></pre>\n<p>A dictionary in C++ is called a <strong>map</strong>, and it is a container of values that are indexed by a key. This means that it stores two kinds of information: keys and values.</p>\n<p>For example, if we want to store the names of a TV series characters and also in how many episodes they appear, we don’t need a list with the names and a list with the number of episodes, we just need a dictionary where the keys are the names and the values are the number of episodes: <code>{ &quot;Dolores&quot;: 30, &quot;Maeve&quot;: 27, &quot;Theresa&quot;:6, &quot;Clementine&quot;:11 }  { &quot;Dolores&quot;: 30, &quot;Maeve&quot;: 27, &quot;Theresa&quot;:6, &quot;Clementine&quot;:11 }</code> </p>\n<p>To initialize it we need to call map, and specify the data types of the keys and values:</p>\n<pre><code class=\"language-cpp\">map&lt;string,int&gt; girls_dictionary;\n</code></pre>\n<p>Here we are creating a dictionary called <code>girls_dictionary</code>, where the keys are strings and the values are integers.</p>\n<p>To insert data into this dictionary we can call each key and assign it a value, one by one:</p>\n<pre><code class=\"language-cpp\">girls_dictionary[&quot;Dolores&quot;] = 30;\ngirls_dictionary[&quot;Maeve&quot;] = 27;\ngirls_dictionary[&quot;Theresa&quot;] = 6;\ngirls_dictionary[&quot;Clementine&quot;] = 11;\n\nfor (auto item : girls_dictionary)\n    cout &lt;&lt; item.first &lt;&lt; &quot; appears in &quot; &lt;&lt; item.second &lt;&lt; &quot; episodes\\n&quot;;\n</code></pre>\n<p>Finally, we can print the items in the dictionary with a loop. When we print it this is not a list, the dictionary itself organizes the keys alphabetically.</p>\n<pre><code class=\"language-cpp\">map&lt;double, float&gt; x_t_dictionary;\nx_t_dictionary[t_0] = x_0;\nx_t_dictionary[t_1] = x_1;\n\n// The functions ROS_INFO() and ROS_INFO_STREAM() essentially have the same purpose as &#39;cout&#39;\nfor (auto item : x_t_dictionary) {\n  ROS_INFO_STREAM(&quot;Time &quot; &lt;&lt; item.first &lt;&lt; &quot;, position &quot; &lt;&lt; item.second\n                          &lt;&lt; &quot; \\n&quot;);\n  }\n</code></pre>\n<h2 id=\"io-functions\">I/O functions</h2>\n<h3 id=\"print\">Print</h3>\n<ul>\n<li>printf</li>\n<li>cout</li>\n</ul>\n<h3 id=\"input\">Input</h3>\n<ul>\n<li>cin</li>\n<li>getline(cin, name)</li>\n</ul>\n<h2 id=\"arrays\">Arrays</h2>\n<pre><code class=\"language-cpp\">int myarray[6];\nint myarray[6] = {4,8,15,16,23,42};\nint myarray[] = {4,8,15,16,23,42};\n</code></pre>\n<p>We can also print all the elements of an array with a for loop:</p>\n<pre><code class=\"language-cpp\">for (auto items : myarray) {\n    cout &lt;&lt; items &lt;&lt; endl;\n}\n</code></pre>\n<h2 id=\"pointers\">Pointers</h2>\n<pre><code class=\"language-cpp\">int myvariable = 42;\n</code></pre>\n<p>We have already seen how to obtain the address of a variable using <code>&amp;</code>. The type of variable that can store this address of another variable is called a <strong>pointer</strong>. Pointers can be declared with the operator <code>*</code> , specifying the type of variable they will be pointing to:</p>\n<pre><code class=\"language-cpp\">int * mypointer;\n</code></pre>\n<p>If we want this pointer to store the address of our previous variable <code>myvariable</code>, we just need to give it the value of its address:</p>\n<pre><code class=\"language-cpp\">mypointer = &amp;myvariable;\ncout &lt;&lt; mypointer &lt;&lt; endl;\n</code></pre>\n<p>This expression will print the previous address of <code>myvariable</code> we’ve seen in the first section:</p>\n<pre><code class=\"language-text-plain\">&gt; 177687\n</code></pre>\n<p>Now that the relationship between <code>myvariable</code> and <code>mypointer</code> is established, we can access the original value of <code>myvariable</code> just using its pointer:</p>\n<pre><code class=\"language-cpp\">cout &lt;&lt; *mypointer &lt;&lt; endl;\n</code></pre>\n<p>This will print the value stored in the memory with the address 177687:</p>\n<pre><code class=\"language-text-plain\">&gt; 42\n</code></pre>\n<p>We call this operation <strong>dereferencing</strong>, using the symbol <code>*</code>, and it is always followed by a name of a variable. Do not confuse the asterisk of declaring a pointer, which follows a data type, with this dereferencing operator!</p>\n<ul>\n<li>Why this is useful?<ul>\n<li>We can first declare a variable, then assign a pointer to its address, and just manipulate this pointer to make changes.</li>\n<li>Also, we cannot change the type of <code>myvariable</code> during a program, but a pointer can be assigned to another variable later in the same program.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"constants\">Constants</h4>\n<p>Pointers may also be used only to access values to read them, not to modify them. These will be pointers pointed to <strong>constant variables</strong>, which need to be specified when declaring the pointer.</p>\n<p>For example, for an integer variable:</p>\n<pre><code class=\"language-cpp\">int variable = 10;\n</code></pre>\n<p>when declaring the pointer we need to specify that it points to a constant integer:</p>\n<pre><code class=\"language-cpp\">const int* pointer = &amp;variable;\n</code></pre>\n<p>We can read the value of the variable it is pointing to by <strong>dereferencing</strong>:</p>\n<pre><code class=\"language-cpp\">cout &lt;&lt; &quot;Value of variable: &quot; &lt;&lt; *pointer &lt;&lt; endl;\n</code></pre>\n<p>But we cannot change the value of the variable:</p>\n<pre><code class=\"language-cpp\">*pointer = 20; // INCORRECT!!!!\n</code></pre>\n<p>We can also create <strong>constant pointers</strong>, independently of them pointing to a constant variable or not. This kind of pointers need to specify the constant character right before the pointer’s name:</p>\n<pre><code class=\"language-cpp\">int* const pointer;\n</code></pre>\n<p>To make this even more trickier, here are all the possibilities we can have using constants:</p>\n<pre><code class=\"language-cpp\">int* pointer;                   // non-constant pointer to non-constant integer\nconst int* pointer;             // non-constant pointer to constant integer\nint* const pointer;             // constant pointer to non-constant integer\nconst int* const pointer;       // constant pointer to constant integer\n</code></pre>\n<p>The final thing we need to learn is that in C++ functions CANNOT return arrays. It is just not possible. What they CAN do is return a pointer to an array. See how useful they are? Awesome.</p>\n<p>In this exercise first we are going to show you a small piece of code of the <strong>RosbotClass</strong> we’ve been using all along:</p>\n<pre><code class=\"language-cpp\">float *RosbotClass::get_laser_full() {\n  float *laser_range_pointer = laser_range.data();\n  return laser_range_pointer;\n}\n</code></pre>\n<p>This function called <strong>get_laser_full()</strong> is a function that returns a pointer (see the operator asterisk before the name of the class <code>**RosbotClass**</code>). What it does is take the values of a ROS vector called <strong>laser_range</strong> and assign them a pointer, then return this pointer.</p>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "C++"
            ],
            "date_published": "2022-12-13T13:45:18-05:00",
            "date_modified": "2022-12-13T13:45:40-05:00"
        },
        {
            "id": "https://liushuya7.github.io/wiki/c-code-snippet/",
            "url": "https://liushuya7.github.io/wiki/c-code-snippet/",
            "title": "C++ Code Snippet",
            "summary": "Network Acquire Localhost IP Address #include &lt;arpa/inet.h&gt; #include &lt;sys/ioctl.h&gt; #include &lt;sys/types.h&gt; #include &lt;linux/if.h&gt; #include &lt;net/if_arp.h&gt; #include &lt;unistd.h&gt; #include &lt;linux/sockios.h&gt; #include &lt;linux/ethtool.h&gt; #include &lt;cstring&gt; #include &lt;cassert&gt;&hellip;",
            "content_html": "<h2 id=\"network\">Network</h2>\n<h3 id=\"acquire-localhost-ip-address\">Acquire Localhost IP Address</h3>\n<pre><code class=\"language-cpp\">#include &lt;arpa/inet.h&gt;\n#include &lt;sys/ioctl.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;linux/if.h&gt;\n#include &lt;net/if_arp.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;linux/sockios.h&gt;\n#include &lt;linux/ethtool.h&gt;\n#include &lt;cstring&gt;\n#include &lt;cassert&gt;\n#include &lt;cstdio&gt;\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n\nstd::string ipAddressToString(uint32_t ipAddress)\n{\n    char buffer[INET_ADDRSTRLEN] = {0};\n    uint32_t addr = htonl(ipAddress);\n    return std::string(inet_ntop(AF_INET, &amp;addr, buffer, sizeof(buffer)));\n}\n\nint main(int argc, char *argv[]) {\n\n    int fd = socket(AF_INET, SOCK_DGRAM, 0); \n    assert(fd &gt; 0); \n\n    struct ifconf ifc;\n    struct ifreq *pifr;\n\n    ifc.ifc_len = sizeof(struct ifreq) * 10; \n    ifc.ifc_buf = (char*) malloc(ifc.ifc_len);\n\n    int err = ioctl(fd, SIOCGIFCONF, &amp;ifc);\n    assert(err &gt;= 0); \n\n    int ifc_num = ifc.ifc_len / sizeof(struct ifreq);\n    printf(&quot;Interfaces: %d\\r\\n&quot;, ifc_num);\n\n    assert(ifc.ifc_buf != NULL);\n    pifr = ifc.ifc_req;\n    \n    // Iterate trought all ifreq and save interface type, ip and netmask\n    for (int i = 0;  i &lt; ifc_num; ++i)\n    {       \n        err = ioctl(fd, SIOCGIFADDR, &amp;pifr[i]);\n        assert(err == 0); \n        uint32_t ipAddress = ntohl(reinterpret_cast&lt;struct sockaddr_in*&gt;(&amp;(pifr[i].ifr_addr))-&gt;sin_addr.s_addr);\n\n        err = ioctl(fd, SIOCGIFNETMASK, &amp;pifr[i]);\n        assert(err == 0); \n        uint32_t netmaskAddress = ntohl(reinterpret_cast&lt;struct sockaddr_in*&gt;(&amp;(pifr[i].ifr_netmask))-&gt;sin_addr.s_addr);\n\n        err = ioctl(fd, SIOCGIFBRDADDR, &amp;pifr[i]);\n        assert(err == 0); \n        uint32_t broadcastAddress = ntohl(reinterpret_cast&lt;struct sockaddr_in*&gt;(&amp;(pifr[i].ifr_broadaddr))-&gt;sin_addr.s_addr);\n\n        printf(&quot;Network Interface: %s, IP=%s, Netmask=%s, Broadcast=%s\\r\\n&quot;, \n               pifr[i].ifr_name, \n               ipAddressToString(ipAddress).c_str(), \n               ipAddressToString(netmaskAddress).c_str(), \n               ipAddressToString(broadcastAddress).c_str());\n    }   \n}\n</code></pre>\n<h2 id=\"uncategorized\">Uncategorized</h2>\n<h3 id=\"22cpp二进制形式打开文件\"><strong>22.cpp二进制形式打开文件</strong></h3>\n<pre><code class=\"language-cpp\">int begin, end;\n\n  std::ifstream file(input_bmp_name, std::ios::in | std::ios::binary);\n  if (!file) {\n    LOG(FATAL) &lt;&lt; &quot;input file &quot; &lt;&lt; input_bmp_name &lt;&lt; &quot; not found&quot;;\n    exit(-1);\n  }\n\n  begin = file.tellg();\n  file.seekg(0, std::ios::end);\n  end = file.tellg();\n  size_t len = end - begin;\n\n  if (s-&gt;verbose) LOG(INFO) &lt;&lt; &quot;len: &quot; &lt;&lt; len;\n\n  std::vector&lt;uint8_t&gt; img_bytes(len);\n  file.seekg(0, std::ios::beg);\n  file.read(reinterpret_cast&lt;char*&gt;(img_bytes.data()), len);\n</code></pre>\n<h3 id=\"21split函数的实现\"><strong>21.split函数的实现</strong></h3>\n<pre><code class=\"language-cpp\">std::vector&lt;std::string&gt; split(const std::string &amp;str, const std::string &amp;sep)\n{\n    std::string::size_type pos;\n    std::vector&lt;std::string&gt; result;\n\n    std::string newstr =  str + sep;\n    size_t size=newstr.size();\n\n    for(size_t i=0; i&lt;size; ++i)\n    {\n        pos=newstr.find(sep,i);\n        if(pos&lt;size)\n        {\n            std::string s = newstr.substr(i,pos-i);\n            result.push_back(s);\n            i=pos+sep.size()-1;\n        }\n    }\n    return result;\n}\n</code></pre>\n<h3 id=\"20判断是否有宏定义\"><strong>20.判断是否有宏定义</strong></h3>\n<pre><code class=\"language-cpp\">#ifdef PLATFORM_QNX  \n  int platform = 1;\n#elif defined PLATFORM_ANDROID\n  int platform = 2;\n#else\n  int platform = 3;\n#endif\n</code></pre>\n<h3 id=\"19不支持模版别名的处理办法\"><strong>19.不支持模版别名的处理办法</strong></h3>\n<p>__cpp_user_defined_literals测试，从gcc4.7版本开始支持模板别名，但是qnx的libc++的__config却检测到gcc就认为没有模板别名的特性</p>\n<p>所以这里有个bug，是libc++库对gcc编译的配置选项出现了问题</p>\n<p>参考标准库中libc++库中memory头文件中的一段代码</p>\n<pre><code class=\"language-cpp\">#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES\n    template &lt;class _Tp&gt; using rebind_alloc =\n                  typename __allocator_traits_rebind&lt;allocator_type, _Tp&gt;::type;\n    template &lt;class _Tp&gt; using rebind_traits = allocator_traits&lt;rebind_alloc&lt;_Tp&gt;&gt;;\n#else  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES\n    template &lt;class _Tp&gt; struct rebind_alloc\n        {typedef typename __allocator_traits_rebind&lt;allocator_type, _Tp&gt;::type other;};\n    template &lt;class _Tp&gt; struct rebind_traits\n        {typedef allocator_traits&lt;typename rebind_alloc&lt;_Tp&gt;::other&gt; other;};\n#endif  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES\n</code></pre>\n<h3 id=\"18libstdclibc\"><strong>18.libstdc++/libc++</strong></h3>\n<p>gcc配套的 <code>libstdc++</code>\n<code>llvm/clang++</code> 配套的 <code>libc++</code></p>\n<p><code>libstdc++</code>包含两个库: <code>libstdc++.so</code>(接口层) 和 <code>libsupc++.so</code>(实现层) \n<code>libc++</code>包含两个库: <code>libc++.so</code>(接口层) <code>libc++abi.so</code>(实现层)</p>\n<p><code>libstdc++</code>的头文件位置 <code>/usr/include/c++/5.4/</code>  其中<code>5.4</code>位gcc编译器的版本号\n<code>libc++</code>头文件的位置 <code>/usr/include/c++/v1/</code></p>\n<p>配置编译选项:【注意】这个是配置选择头文件的\n<code>-stdlib=libc++  -stdlib=libstdc++</code></p>\n<p>通过cmake配置</p>\n<pre><code class=\"language-cmake\">set(CMAKE_EXE_LINKER_FLAGS &quot;${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -lc++ -lc++abi&quot;)\n</code></pre>\n<h3 id=\"17虚析构的作用\"><strong>17.虚析构的作用</strong></h3>\n<p>1.通过父类指针释放所指向的子类。</p>\n<pre><code class=\"language-cpp\">class Animal {\n  vitual ~Animal() {\n    std::cout &lt;&lt; &quot;delete animal..&quot; &lt;&lt; std::endl;\n  }\n}\n\nclass Dog : public Animal {\n  ~Dog() {\n    std::cout &lt;&lt; &quot;delete dog...&quot; &lt;&lt; std::endl;\n  };\n};\n\nAnimal* animal = new Dog();\n\ndelete animal;\n</code></pre>\n<p>如上执行会输出</p>\n<pre><code class=\"language-text-plain\">delete dog...\ndelete animal..\n</code></pre>\n<p>如果去掉了vitual修饰~Animal()，则会只输出如下</p>\n<pre><code class=\"language-text-plain\">delete animal..\n</code></pre>\n<p>因为父类的构造函数和析构函数不能被子类继承，但是会形成多态，</p>\n<p>所以当父类定义成虚析构函数的时候，会先动态调用子类的析构函数，</p>\n<p>然后由于delete的机制，会接着调用父类的析构函数</p>\n<h3 id=\"16待查。。。\"><strong>16.待查。。。</strong></h3>\n<pre><code class=\"language-cpp\">std::atomic_bool                             shutdownFlag_;\nwhile (!shutdownFlag_.load(std::memory_order_acquire)) {\n\n}\n</code></pre>\n<h3 id=\"15同名的头文件\"><strong>15.同名的头文件</strong></h3>\n<p>如果搜索路径中包含两个同名的头文件，这时候只会包含第一个搜索到的头文件。示例如下</p>\n<pre><code class=\"language-text-plain\">目录结构\n\ncpptest\n|\n|---build\n|\n|---include_1\n|   |\n|   |---same_name.hpp\n|\n|---include_2\n|   |\n|   |---same_name.hpp\n|\n|---main.cpp\n|\n|---CMakeLists.txt\n</code></pre>\n<p><code>include_1/same_name.hpp</code> 中内容如下</p>\n<pre><code class=\"language-cpp\">struct cat{\n  int age;\n};\n</code></pre>\n<p><code>include_2/same_name.hpp</code> 中内容如下</p>\n<pre><code class=\"language-cpp\">struct dog{\n  int age;\n};\n</code></pre>\n<p><code>CMakeLists.txt</code>内容如下</p>\n<pre><code class=\"language-cmake\">project(demo)\nset(CMAKE_CXX_STANDARD 11)\n\nadd_executable(\n  ${PROJECT_NAME}\n  main.cpp)\n\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n  include_2\n  include_1\n)\n</code></pre>\n<p><code>main.cpp</code>内容如下</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;same_name.hpp&quot;\n\nint main(int argc, char* argv[]) {\n  cat c;\n  c.age = 1;\n  dog d;\n  d.age = 2;\n  cout &lt;&lt; d.age &lt;&lt; endl;\n}\n</code></pre>\n<p>这时候编译会报错如下</p>\n<pre><code class=\"language-bash\">/Users/liushichao/Exercise/cpp/test_cpp/main.cpp:6:3: error: unknown type name &#39;cat&#39;\n</code></pre>\n<p>调整<code>CMakeLists.txt</code>内容如下</p>\n<pre><code class=\"language-cmake\">project(demo)\nset(CMAKE_CXX_STANDARD 11)\n\nadd_executable(\n  ${PROJECT_NAME}\n  main.cpp)\n\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n  include_1\n  include_2\n)\n</code></pre>\n<p>这时候编译会报错如下</p>\n<pre><code class=\"language-bash\">/Users/liushichao/Exercise/cpp/test_cpp/main.cpp:8:3: error: unknown type name &#39;dog&#39;\n</code></pre>\n<p>调整<code>CMakeLists.txt</code>内容如下</p>\n<pre><code class=\"language-cmake\">project(demo)\nset(CMAKE_CXX_STANDARD 11)\n\nadd_executable(\n  ${PROJECT_NAME}\n  main.cpp)\n\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n)\n</code></pre>\n<p><code>main.cpp</code>内容如下</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n#include &quot;include_1/same_name.hpp&quot;\n#include &quot;include_2/same_name.hpp&quot;\n\nint main(int argc, char* argv[]) {\n  cat c;\n  c.age = 1;\n  dog d;\n  d.age = 2;\n  cout &lt;&lt; d.age &lt;&lt; endl;\n\n}\n</code></pre>\n<p>这样就可以运行成功了。</p>\n<h3 id=\"14可变参数数模板\"><strong>14.可变参数数模板</strong></h3>\n<p>1.递归展开参数包</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n\nstd::string operator&quot;&quot;_s (const char* orign) {\n\n  return  orign;\n}\n\ntemplate &lt;typename T&gt;\nT sum(T head) {\n  return head;\n}\n\ntemplate &lt;typename T, typename... Types&gt; \nT sum(T head, Types... args) {\n  cout &lt;&lt; sizeof...(args) &lt;&lt; endl;\n  return head + sum&lt;T&gt;(args...);\n}\n\nint main(int argc, char* argv[]) {\n  cout &lt;&lt; sum(1, 2, 3, 4, 5) &lt;&lt; endl;\n}\n</code></pre>\n<h3 id=\"13c操作符--operators\"><strong>13.c++操作符 / operators</strong></h3>\n<p>c++ 11 引入了新的操作夫，用户定义字面量操作符，<a href=\"https://en.cppreference.com/w/cpp/language/user_literal\">https://en.cppreference.com/w/cpp/language/user_literal</a></p>\n<p>C++ divides the operators into the following groups:</p>\n<ul>\n<li>Arithmetic operators</li>\n<li>Assignment operators</li>\n<li>Comparison operators</li>\n<li>Logical operators</li>\n<li>Bitwise operators</li>\n</ul>\n<h3 id=\"12cpp文件中编写模板的定义\"><strong>12.cpp文件中编写模板的定义</strong></h3>\n<p>参考：</p>\n<p><a href=\"https://stackoverflow.com/a/115735\">https://stackoverflow.com/a/115735</a></p>\n<p><a href=\"https://www.codeproject.com/Articles/48575/How-to-Define-a-Template-Class-in-a-h-File-and-Imp\">https://www.codeproject.com/Articles/48575/How-to-Define-a-Template-Class-in-a-h-File-and-Imp</a></p>\n<pre><code class=\"language-cpp\">//mstack.hpp\ntemplate&lt;typename T&gt;\nclass mstack{\n void push(const T&amp; e);\n};\n</code></pre>\n<pre><code class=\"language-cpp\">//mstack.cpp\ntemplate&lt;typename T&gt;\nvoid mstack&lt;T&gt;::push(const T&amp; e) {\n data_.push_back(e);\n}\n\n//important!!!\n// this func is no need to be call.\nvoid testxxx() {\n mstack&lt;int&gt; ms;\n ms.push(1);\n}\n</code></pre>\n<pre><code class=\"language-cpp\">//client.cpp\n\nvoid main() {\n mstack&lt;int&gt; m_c_s;\n m_c_s.push(2334);\n}\n</code></pre>\n<h3 id=\"11类中的const成员函数\"><strong>11.类中的const成员函数</strong></h3>\n<p>参考： c++ primer 5 中文版 p231</p>\n<p>成员函数的参数列表后面紧跟的const关键字是修饰隐式的this指针的。是顶层指针（参考下边的10顶层const的介绍），表明this是指向常量对象的，const成员函数中的 this 指向的值不能修改。const 的对象上不能调用非const成员函数，所以定义成const的成员函数调用起来更灵活。</p>\n<h3 id=\"10顶层const与底层const\"><strong>10.顶层const与底层const</strong></h3>\n<p>参考：c++ primer 5 中文版 p57</p>\n<p>这个是针对指针的，因为指针本身也是对象，所以const修饰指针的变量的时候可能产生歧义，一个是指针变量是常量不可变，另一种情况是指针指向的是常量，这样指针变量本身是可以修改的。</p>\n<p>为了区分这两种情况，引入了顶层const和底层const两种类型，</p>\n<pre><code class=\"language-text-plain\"> p  &lt;--- p是指向i的指针，如果p是const的话，就叫顶层const，顶层const的写法   int* const p = i; ,const 直接修饰的p，\n \n |\n v\n\n i  &lt;--- 如果i 是const的话，就是底层const， 底层const的写法 ： const int * p = i; ,const 直接修饰的是int，代表指向的是常量的int类型\n\n</code></pre>\n<h3 id=\"9stdunordered_map-查找指定key是否存在\"><strong>9.std::unordered_map 查找指定key是否存在</strong></h3>\n<p>使用<code>count(key)</code>方法，如果key存在，返回1，如果不存在，返回0</p>\n<h3 id=\"8stdmap有序\"><strong>8.std::map有序</strong></h3>\n<p>std::map是有序的，但是不是插入的顺序，而是按照key的值进行排序的，默认是从小到大排序，可以通过模版参数的第三个参数指定排序类型</p>\n<h3 id=\"7c计时\"><strong>7.c++计时</strong></h3>\n<pre><code class=\"language-cpp\">1.包含头文件\n#include &lt;chrono&gt;\n\n2.计时开始位置添加\nstd::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; time_begin = std::chrono::high_resolution_clock::now();\n\n3.计时结束位置添加\nlong long eclipse_time = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(std::chrono::high_resolution_clock::now() - time_begin).count();\n          \n4.eclipse_time即为统计的时间，单位是ms\n</code></pre>\n<h3 id=\"6各种类型的最大最小值宏定义\"><strong>6.各种类型的最大最小值宏定义</strong></h3>\n<p>包含头文件</p>\n<pre><code class=\"language-cpp\">#include &lt;float.h&gt;  //double float 需要用到这个\n#include &lt;limits.h&gt; //int longlong long 需要用这个\n</code></pre>\n<p>下边是具体的最大最小值的宏定义</p>\n<pre><code class=\"language-cpp\">int   n1　=　INT_MIN;\nint   n2　=　INT_MAX;\nfloat　f1　=　FLT_MIN;\nfloat　f2　=　FLT_MAX;\ndouble　d1　=　DBL_MIN;\ndouble　d2　=　DBL_MAX;\nlong ln1 =  LONG_MAX;\nlong ln2 =  LONG_MIN;\nlong long lln1 = LONG_LONG_MAX;\nlong long lln1 = LONG_LONG_MIN;\n</code></pre>\n<h3 id=\"5condition_variable\"><strong>5.condition_variable</strong></h3>\n<p>wait_for可以指定等待时间，用来实现定时器效果</p>\n<p>下边的代码，可以通过condition.signal()来唤醒阻塞的线程，其他时候会到一秒钟自动唤醒，但是这种可能会有假唤醒的时候，如果要避免假唤醒，可以再传递一个函数，返回bool类型。</p>\n<pre><code class=\"language-cpp\">std::unique_lock&lt;std::mutex&gt; sleep_lock(mutex_);\ncondition.wait_for(sleep_lock, std::chrono::milliseconds(1000));\n</code></pre>\n<h3 id=\"4运算符优先级\"><strong>4.运算符优先级</strong></h3>\n<pre><code class=\"language-text-plain\">\n*乘 /除\n\n+加 -减\n\n&gt;大于 &lt;小于\n\n==等于 !=不等于\n\n&amp;&amp;与 \n\n||或\n</code></pre>\n<h3 id=\"3stdunique_lock-与-stdlock_guard的区别\"><strong>3.std::unique_lock 与 std::lock_guard的区别</strong></h3>\n<p>unique_lock可以随时释放锁，调用unlock()</p>\n<p>lock_guard需要等到生命周期结束后，才能自动释放锁。</p>\n<pre><code class=\"language-cpp\">用法示例：\n    {\n        std::unique_lock&lt;std::mutex&gt; lock_get_lane_data(mutex_lan_date_msg_);\n        //lock_get_lane_data.unlock();\n    }\n</code></pre>\n<h3 id=\"将double转换成string时保留15位小数\"><strong>将double转换成string时保留15位小数</strong></h3>\n<pre><code class=\"language-cpp\">#include &lt;iomanip&gt;\n#include &lt;sstream&gt;\n\ndouble ceshi = std::stod(&quot;3.123456789&quot;);\nstringstream ss;\nss &lt;&lt; std::setprecision(15) &lt;&lt; ceshi;\nstd::string ceshi_str = ss.str();\ncout &lt;&lt; ceshi_str &lt;&lt;endl;\n</code></pre>\n<p>java中</p>\n<pre><code class=\"language-text-plain\">其中String s=String.format(&quot;%.2f&quot;,d)表示小数点后任意两位小数，其中2为表示两位小数，若需要三位小数，把2改为3即可，其他同理。\n</code></pre>\n<p>c++ primer 5th p600</p>\n<h3 id=\"使用ms后缀\"><strong>使用ms后缀</strong></h3>\n<pre><code class=\"language-cpp\">#include &lt;chrono&gt;\nusing namespace std::chrono_literals;\n</code></pre>\n<h3 id=\"使用sstream输出-unsigned-char存储的数字\"><strong>使用sstream输出 unsigned char存储的数字</strong></h3>\n<p>为了节省存储空间，经常会用usigned char来存储一些数值范围比较小的数字，当用ostringstream转换成string时会出现问题，举例如下</p>\n<pre><code class=\"language-cpp\">unsinged char a = 10;\nstd::ostringstream oss;\noss &lt;&lt; a;\ncout &lt;&lt; oss.str(); //输出换行\n</code></pre>\n<p>这里标准输出打印的并不是“10”，而是会换行，因为a的类型是char，所以会把a的值作为ascii码的值，转换成string，要想输出“10”，需要强转a成int类型</p>\n<pre><code class=\"language-cpp\">unsinged char a = 10;\nstd::ostringstream oss;\noss &lt;&lt; (int)a;\ncout &lt;&lt; oss.str(); //输出10\n</code></pre>\n<h2 id=\"opencv\">OpenCV</h2>\n<h3 id=\"3本地cmake加入opencv库\"><strong>3.本地cmake加入opencv库</strong></h3>\n<pre><code class=\"language-cmake\">find_package(OpenCV REQUIRED)  #注意大小写\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PUBLIC\n  ${OpenCV_INCLUDE_DIRS}\n)\n\ntarget_link_libraries(\n  ${PROJECT_NAME}\n  ${OpenCV_LIBS}\n)\n</code></pre>\n<h3 id=\"2编译安卓ndk库\"><strong>2.编译安卓ndk库</strong></h3>\n<p>从github下载源码，进入到源码跟目录，创建build文件夹，进入build文件夹，执行下边的编译指令</p>\n<pre><code class=\"language-sh\">export ANDROID_NDK=/Users/liushichao/Library/Android/sdk/ndk/21.0.6113669\nexport ANDROID_ABI=armeabi-v7a\nexport ANDROID_NATIVE_API_LEVEL=android-28\nexport ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-clang\n\ncmake\t\t\t       \\\n  -DANDROID_NDK=${ANDROID_NDK} \\\n  -DANDROID_ABI=${ANDROID_ABI} \\\n  -DANDROID_STL=c++_shared  \\\n  -DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL} \\\n  -DBUILD_SHARED_LIBS=1 \\\n  -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \\\n  -DANDROID_TOOLCHAIN_NAME=${ANDROID_TOOLCHAIN_NAME} \\\n  -D BUILD_opencv_java=ON \\\n  -D BUILD_ANDROID_PROJECTS=ON \\\n        -D WITH_CUDA=OFF \\\n        -D WITH_MATLAB=OFF \\\n        -D BUILD_ANDROID_EXAMPLES=OFF \\\n        -D BUILD_DOCS=OFF \\\n        -D CMAKE_BUILD_TYPE=Release \\\n        -D BUILD_PERF_TESTS=OFF \\\n        -D BUILD_TESTS=OFF \\\n        -DCMAKE_INSTALL_PREFIX=&quot;/Users/liushichao/source/opencv/install_ndk&quot; \\\n  ..\n\nmake -j8\nmake install\n</code></pre>\n<h3 id=\"1注意cvmat的宽高参数\"><strong>1.注意cv::Mat()的宽高参数</strong></h3>\n<p>前边是高，后边是宽，不要弄反了</p>\n<pre><code class=\"language-cpp\">Mat (int rows, int cols, int type);\n</code></pre>\n",
            "author": {
                "name": "Joshua Liu"
            },
            "tags": [
                   "C++"
            ],
            "date_published": "2022-12-13T13:34:58-05:00",
            "date_modified": "2022-12-13T13:42:39-05:00"
        }
    ]
}
